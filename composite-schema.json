{
  "oneOf": [
    {
      "if": {
        "properties": {
          "kind": {
            "const": "ClusterPromotionTask"
          }
        },
        "required": [
          "kind"
        ]
      },
      "then": {
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "spec": {
            "description": "Spec describes the desired transition of a specific Stage into a specific\nFreight.",
            "properties": {
              "steps": {
                "description": "Steps specifies the directives to be executed as part of this\nPromotionTask. The steps as defined here are inflated into a\nPromotion when it is built from a PromotionTemplate.",
                "items": {
                  "description": "PromotionStep describes a directive to be executed as part of a Promotion.",
                  "properties": {
                    "as": {
                      "description": "As is the alias this step can be referred to as.",
                      "type": "string"
                    },
                    "config": {
                      "description": "Config is opaque configuration for the PromotionStep that is understood\nonly by each PromotionStep's implementation. It is legal to utilize\nexpressions in defining values at any level of this block.\nSee https://docs.kargo.io/user-guide/reference-docs/expressions for details.",
                      "x-kubernetes-preserve-unknown-fields": true
                    },
                    "if": {
                      "description": "If is an optional expression that, if present, must evaluate to a boolean\nvalue. If the expression evaluates to false, the step will be skipped.\nIf the expression does not evaluate to a boolean value, the step will be\nconsidered to have failed.",
                      "type": "string"
                    },
                    "retry": {
                      "description": "Retry is the retry policy for this step.",
                      "properties": {
                        "errorThreshold": {
                          "description": "ErrorThreshold is the number of consecutive times the step must fail (for\nany reason) before retries are abandoned and the entire Promotion is marked\nas failed.\n\nIf this field is set to 0, the effective default will be a step-specific\none. If no step-specific default exists (i.e. is also 0), the effective\ndefault will be the system-wide default of 1.\n\nA value of 1 will cause the Promotion to be marked as failed after just\na single failure; i.e. no retries will be attempted.\n\nThere is no option to specify an infinite number of retries using a value\nsuch as -1.\n\nIn a future release, Kargo is likely to become capable of distinguishing\nbetween recoverable and non-recoverable step failures. At that time, it is\nplanned that unrecoverable failures will not be subject to this threshold\nand will immediately cause the Promotion to be marked as failed without\nfurther condition.",
                          "format": "int32",
                          "maximum": 2147483647,
                          "minimum": -2147483648,
                          "type": "integer"
                        },
                        "timeout": {
                          "description": "Timeout is the soft maximum interval in which a step that returns a Running\nstatus (which typically indicates it's waiting for something to happen)\nmay be retried.\n\nThe maximum is a soft one because the check for whether the interval has\nelapsed occurs AFTER the step has run. This effectively means a step may\nrun ONCE beyond the close of the interval.\n\nIf this field is set to nil, the effective default will be a step-specific\none. If no step-specific default exists (i.e. is also nil), the effective\ndefault will be the system-wide default of 0.\n\nA value of 0 will cause the step to be retried indefinitely unless the\nErrorThreshold is reached.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "task": {
                      "description": "Task is a reference to a PromotionTask that should be inflated into a\nPromotion when it is built from a PromotionTemplate.",
                      "properties": {
                        "kind": {
                          "description": "Kind is the type of the PromotionTask. Can be either PromotionTask or\nClusterPromotionTask, default is PromotionTask.",
                          "enum": [
                            "PromotionTask",
                            "ClusterPromotionTask"
                          ],
                          "type": "string"
                        },
                        "name": {
                          "description": "Name is the name of the (Cluster)PromotionTask.",
                          "maxLength": 253,
                          "minLength": 1,
                          "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
                          "type": "string"
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "type": "object"
                    },
                    "uses": {
                      "description": "Uses identifies a runner that can execute this step.",
                      "minLength": 1,
                      "type": "string"
                    },
                    "vars": {
                      "description": "Vars is a list of variables that can be referenced by expressions in\nthe step's Config. The values override the values specified in the\nPromotionSpec.",
                      "items": {
                        "description": "PromotionVariable describes a single variable that may be referenced by\nexpressions in promotion steps.",
                        "properties": {
                          "name": {
                            "description": "Name is the name of the variable.",
                            "minLength": 1,
                            "pattern": "^[a-zA-Z_]\\w*$",
                            "type": "string"
                          },
                          "value": {
                            "description": "Value is the value of the variable. It is allowed to utilize expressions\nin the value.\nSee https://docs.kargo.io/user-guide/reference-docs/expressions for details.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object",
                  "x-kubernetes-validations": [
                    {
                      "message": "PromotionTask step must have uses set and must not reference another task",
                      "rule": "has(self.uses) && !has(self.task)"
                    }
                  ]
                },
                "minItems": 1,
                "type": "array"
              },
              "vars": {
                "description": "Vars specifies the variables available to the PromotionTask. The\nvalues of these variables are the default values that can be\noverridden by the step referencing the task.",
                "items": {
                  "description": "PromotionVariable describes a single variable that may be referenced by\nexpressions in promotion steps.",
                  "properties": {
                    "name": {
                      "description": "Name is the name of the variable.",
                      "minLength": 1,
                      "pattern": "^[a-zA-Z_]\\w*$",
                      "type": "string"
                    },
                    "value": {
                      "description": "Value is the value of the variable. It is allowed to utilize expressions\nin the value.\nSee https://docs.kargo.io/user-guide/reference-docs/expressions for details.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object"
                },
                "type": "array"
              }
            },
            "required": [
              "steps"
            ],
            "type": "object"
          }
        },
        "required": [
          "spec"
        ],
        "type": "object"
      },
      "else": {
        "not": {}
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": "Freight"
          }
        },
        "required": [
          "kind"
        ]
      },
      "then": {
        "description": "Freight represents a collection of versioned artifacts.",
        "properties": {
          "alias": {
            "description": "Alias is a human-friendly alias for a piece of Freight. This is an optional\nfield. A defaulting webhook will sync this field with the value of the\nkargo.akuity.io/alias label. When the alias label is not present or differs\nfrom the value of this field, the defaulting webhook will set the label to\nthe value of this field. If the alias label is present and this field is\nempty, the defaulting webhook will set the value of this field to the value\nof the alias label. If this field is empty and the alias label is not\npresent, the defaulting webhook will choose an available alias and assign\nit to both the field and label.",
            "type": "string"
          },
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "charts": {
            "description": "Charts describes specific versions of specific Helm charts.",
            "items": {
              "description": "Chart describes a specific version of a Helm chart.",
              "properties": {
                "name": {
                  "description": "Name specifies the name of the chart.",
                  "type": "string"
                },
                "repoURL": {
                  "description": "RepoURL specifies the URL of a Helm chart repository. Classic chart\nrepositories (using HTTP/S) can contain differently named charts. When this\nfield points to such a repository, the Name field will specify the name of\nthe chart within the repository. In the case of a repository within an OCI\nregistry, the URL implicitly points to a specific chart and the Name field\nwill be empty.",
                  "type": "string"
                },
                "version": {
                  "description": "Version specifies a particular version of the chart.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "commits": {
            "description": "Commits describes specific Git repository commits.",
            "items": {
              "description": "GitCommit describes a specific commit from a specific Git repository.",
              "properties": {
                "author": {
                  "description": "Author is the author of the commit.",
                  "type": "string"
                },
                "branch": {
                  "description": "Branch denotes the branch of the repository where this commit was found.",
                  "type": "string"
                },
                "committer": {
                  "description": "Committer is the person who committed the commit.",
                  "type": "string"
                },
                "id": {
                  "description": "ID is the ID of a specific commit in the Git repository specified by\nRepoURL.",
                  "type": "string"
                },
                "message": {
                  "description": "Message is the message associated with the commit. At present, this only\ncontains the first line (subject) of the commit message.",
                  "type": "string"
                },
                "repoURL": {
                  "description": "RepoURL is the URL of a Git repository.",
                  "type": "string"
                },
                "tag": {
                  "description": "Tag denotes a tag in the repository that matched selection criteria and\nresolved to this commit.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "images": {
            "description": "Images describes specific versions of specific container images.",
            "items": {
              "description": "Image describes a specific version of a container image.",
              "properties": {
                "annotations": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Annotations is a map of arbitrary metadata for the image.",
                  "type": "object"
                },
                "digest": {
                  "description": "Digest identifies a specific version of the image in the repository\nspecified by RepoURL. This is a more precise identifier than Tag.",
                  "type": "string"
                },
                "gitRepoURL": {
                  "description": "GitRepoURL specifies the URL of a Git repository that contains the source\ncode for the image repository referenced by the RepoURL field if Kargo was\nable to infer it.",
                  "type": "string"
                },
                "repoURL": {
                  "description": "RepoURL describes the repository in which the image can be found.",
                  "type": "string"
                },
                "tag": {
                  "description": "Tag identifies a specific version of the image in the repository specified\nby RepoURL.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "origin": {
            "description": "Origin describes a kind of Freight in terms of its origin.",
            "properties": {
              "kind": {
                "description": "Kind is the kind of resource from which Freight may have originated. At\npresent, this can only be \"Warehouse\".",
                "enum": [
                  "Warehouse"
                ],
                "type": "string"
              },
              "name": {
                "description": "Name is the name of the resource of the kind indicated by the Kind field\nfrom which Freight may originate.",
                "type": "string"
              }
            },
            "required": [
              "kind",
              "name"
            ],
            "type": "object"
          },
          "status": {
            "description": "Status describes the current status of this Freight.",
            "properties": {
              "approvedFor": {
                "additionalProperties": {
                  "description": "ApprovedStage describes a Stage for which Freight has been (manually)\napproved.",
                  "properties": {
                    "approvedAt": {
                      "description": "ApprovedAt is the time at which the Freight was approved for the Stage.",
                      "format": "date-time",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "description": "ApprovedFor describes the Stages for which this Freight has been approved\npreemptively/manually by a user. This is useful for hotfixes, where one\nmight wish to promote a piece of Freight to a given Stage without\ntransiting the entire pipeline.",
                "type": "object"
              },
              "currentlyIn": {
                "additionalProperties": {
                  "description": "CurrentStage reflects a Stage's current use of Freight.",
                  "properties": {
                    "since": {
                      "description": "Since is the time at which the Stage most recently started using the\nFreight. This can be used to calculate how long the Freight has been in use\nby the Stage.",
                      "format": "date-time",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "description": "CurrentlyIn describes the Stages in which this Freight is currently in use.",
                "type": "object"
              },
              "verifiedIn": {
                "additionalProperties": {
                  "description": "VerifiedStage describes a Stage in which Freight has been verified.",
                  "properties": {
                    "longestSoak": {
                      "description": "LongestCompletedSoak represents the longest definite time interval wherein\nthe Freight was in CONTINUOUS use by the Stage. This value is updated as\nFreight EXITS the Stage. If the Freight is currently in use by the Stage,\nthe time elapsed since the Freight ENTERED the Stage is its current soak\ntime, which may exceed the value of this field.",
                      "type": "string"
                    },
                    "verifiedAt": {
                      "description": "VerifiedAt is the time at which the Freight was verified in the Stage.",
                      "format": "date-time",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "description": "VerifiedIn describes the Stages in which this Freight has been verified\nthrough promotion and subsequent health checks.",
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "origin"
        ],
        "type": "object"
      },
      "else": {
        "not": {}
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": "Project"
          }
        },
        "required": [
          "kind"
        ]
      },
      "then": {
        "description": "Project is a resource type that reconciles to a specially labeled namespace\nand other TODO: TBD project-level resources.",
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "spec": {
            "description": "Spec describes a Project.",
            "properties": {
              "promotionPolicies": {
                "description": "PromotionPolicies defines policies governing the promotion of Freight to\nspecific Stages within this Project.",
                "items": {
                  "description": "PromotionPolicy defines policies governing the promotion of Freight to a\nspecific Stage.",
                  "properties": {
                    "autoPromotionEnabled": {
                      "description": "AutoPromotionEnabled indicates whether new Freight can automatically be\npromoted into the Stage referenced by the Stage field. Note: There are may\nbe other conditions also required for an auto-promotion to occur. This\nfield defaults to false, but is commonly set to true for Stages that\nsubscribe to Warehouses instead of other, upstream Stages. This allows\nusers to define Stages that are automatically updated as soon as new\nartifacts are detected.",
                      "type": "boolean"
                    },
                    "stage": {
                      "minLength": 1,
                      "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
                      "type": "string"
                    }
                  },
                  "required": [
                    "stage"
                  ],
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "status": {
            "description": "Status describes the Project's current status.",
            "properties": {
              "conditions": {
                "description": "Conditions contains the last observations of the Project's current\nstate.",
                "items": {
                  "description": "Condition contains details for one aspect of the current state of this API Resource.",
                  "properties": {
                    "lastTransitionTime": {
                      "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "message": {
                      "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                      "maxLength": 32768,
                      "type": "string"
                    },
                    "observedGeneration": {
                      "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                      "format": "int64",
                      "maximum": 9223372036854776000,
                      "minimum": 0,
                      "type": "integer"
                    },
                    "reason": {
                      "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                      "maxLength": 1024,
                      "minLength": 1,
                      "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                      "type": "string"
                    },
                    "status": {
                      "description": "status of the condition, one of True, False, Unknown.",
                      "enum": [
                        "True",
                        "False",
                        "Unknown"
                      ],
                      "type": "string"
                    },
                    "type": {
                      "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                      "maxLength": 316,
                      "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                      "type": "string"
                    }
                  },
                  "required": [
                    "lastTransitionTime",
                    "message",
                    "reason",
                    "status",
                    "type"
                  ],
                  "type": "object"
                },
                "type": "array",
                "x-kubernetes-list-map-keys": [
                  "type"
                ],
                "x-kubernetes-list-type": "map"
              },
              "message": {
                "description": "Message is a display message about the Project, including any errors\npreventing the Project from being reconciled. i.e. If the Phase field has a\nvalue of CreationFailed, this field can be expected to explain why.\n\nDeprecated: Use the Conditions field instead.",
                "type": "string"
              },
              "phase": {
                "description": "Phase describes the Project's current phase.\n\nDeprecated: Use the Conditions field instead.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "else": {
        "not": {}
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": "Promotion"
          }
        },
        "required": [
          "kind"
        ]
      },
      "then": {
        "description": "Promotion represents a request to transition a particular Stage into a\nparticular Freight.",
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "spec": {
            "description": "Spec describes the desired transition of a specific Stage into a specific\nFreight.",
            "properties": {
              "freight": {
                "description": "Freight specifies the piece of Freight to be promoted into the Stage\nreferenced by the Stage field.",
                "maxLength": 253,
                "minLength": 1,
                "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
                "type": "string"
              },
              "stage": {
                "description": "Stage specifies the name of the Stage to which this Promotion\napplies. The Stage referenced by this field MUST be in the same\nnamespace as the Promotion.",
                "maxLength": 253,
                "minLength": 1,
                "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
                "type": "string"
              },
              "steps": {
                "description": "Steps specifies the directives to be executed as part of this Promotion.\nThe order in which the directives are executed is the order in which they\nare listed in this field.",
                "items": {
                  "description": "PromotionStep describes a directive to be executed as part of a Promotion.",
                  "properties": {
                    "as": {
                      "description": "As is the alias this step can be referred to as.",
                      "type": "string"
                    },
                    "config": {
                      "description": "Config is opaque configuration for the PromotionStep that is understood\nonly by each PromotionStep's implementation. It is legal to utilize\nexpressions in defining values at any level of this block.\nSee https://docs.kargo.io/user-guide/reference-docs/expressions for details.",
                      "x-kubernetes-preserve-unknown-fields": true
                    },
                    "if": {
                      "description": "If is an optional expression that, if present, must evaluate to a boolean\nvalue. If the expression evaluates to false, the step will be skipped.\nIf the expression does not evaluate to a boolean value, the step will be\nconsidered to have failed.",
                      "type": "string"
                    },
                    "retry": {
                      "description": "Retry is the retry policy for this step.",
                      "properties": {
                        "errorThreshold": {
                          "description": "ErrorThreshold is the number of consecutive times the step must fail (for\nany reason) before retries are abandoned and the entire Promotion is marked\nas failed.\n\nIf this field is set to 0, the effective default will be a step-specific\none. If no step-specific default exists (i.e. is also 0), the effective\ndefault will be the system-wide default of 1.\n\nA value of 1 will cause the Promotion to be marked as failed after just\na single failure; i.e. no retries will be attempted.\n\nThere is no option to specify an infinite number of retries using a value\nsuch as -1.\n\nIn a future release, Kargo is likely to become capable of distinguishing\nbetween recoverable and non-recoverable step failures. At that time, it is\nplanned that unrecoverable failures will not be subject to this threshold\nand will immediately cause the Promotion to be marked as failed without\nfurther condition.",
                          "format": "int32",
                          "maximum": 2147483647,
                          "minimum": -2147483648,
                          "type": "integer"
                        },
                        "timeout": {
                          "description": "Timeout is the soft maximum interval in which a step that returns a Running\nstatus (which typically indicates it's waiting for something to happen)\nmay be retried.\n\nThe maximum is a soft one because the check for whether the interval has\nelapsed occurs AFTER the step has run. This effectively means a step may\nrun ONCE beyond the close of the interval.\n\nIf this field is set to nil, the effective default will be a step-specific\none. If no step-specific default exists (i.e. is also nil), the effective\ndefault will be the system-wide default of 0.\n\nA value of 0 will cause the step to be retried indefinitely unless the\nErrorThreshold is reached.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "task": {
                      "description": "Task is a reference to a PromotionTask that should be inflated into a\nPromotion when it is built from a PromotionTemplate.",
                      "properties": {
                        "kind": {
                          "description": "Kind is the type of the PromotionTask. Can be either PromotionTask or\nClusterPromotionTask, default is PromotionTask.",
                          "enum": [
                            "PromotionTask",
                            "ClusterPromotionTask"
                          ],
                          "type": "string"
                        },
                        "name": {
                          "description": "Name is the name of the (Cluster)PromotionTask.",
                          "maxLength": 253,
                          "minLength": 1,
                          "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
                          "type": "string"
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "type": "object"
                    },
                    "uses": {
                      "description": "Uses identifies a runner that can execute this step.",
                      "minLength": 1,
                      "type": "string"
                    },
                    "vars": {
                      "description": "Vars is a list of variables that can be referenced by expressions in\nthe step's Config. The values override the values specified in the\nPromotionSpec.",
                      "items": {
                        "description": "PromotionVariable describes a single variable that may be referenced by\nexpressions in promotion steps.",
                        "properties": {
                          "name": {
                            "description": "Name is the name of the variable.",
                            "minLength": 1,
                            "pattern": "^[a-zA-Z_]\\w*$",
                            "type": "string"
                          },
                          "value": {
                            "description": "Value is the value of the variable. It is allowed to utilize expressions\nin the value.\nSee https://docs.kargo.io/user-guide/reference-docs/expressions for details.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object",
                  "x-kubernetes-validations": [
                    {
                      "message": "Promotion step must have uses set and must not reference a task",
                      "rule": "has(self.uses) && !has(self.task)"
                    }
                  ]
                },
                "minItems": 1,
                "type": "array"
              },
              "vars": {
                "description": "Vars is a list of variables that can be referenced by expressions in\npromotion steps.",
                "items": {
                  "description": "PromotionVariable describes a single variable that may be referenced by\nexpressions in promotion steps.",
                  "properties": {
                    "name": {
                      "description": "Name is the name of the variable.",
                      "minLength": 1,
                      "pattern": "^[a-zA-Z_]\\w*$",
                      "type": "string"
                    },
                    "value": {
                      "description": "Value is the value of the variable. It is allowed to utilize expressions\nin the value.\nSee https://docs.kargo.io/user-guide/reference-docs/expressions for details.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object"
                },
                "type": "array"
              }
            },
            "required": [
              "freight",
              "stage",
              "steps"
            ],
            "type": "object"
          },
          "status": {
            "description": "Status describes the current state of the transition represented by this\nPromotion.",
            "properties": {
              "currentStep": {
                "description": "CurrentStep is the index of the current promotion step being executed. This\npermits steps that have already run successfully to be skipped on\nsubsequent reconciliations attempts.",
                "format": "int64",
                "maximum": 9223372036854776000,
                "minimum": -9223372036854776000,
                "type": "integer"
              },
              "finishedAt": {
                "description": "FinishedAt is the time when the promotion was completed.",
                "format": "date-time",
                "type": "string"
              },
              "freight": {
                "description": "Freight is the detail of the piece of freight that was referenced by this promotion.",
                "properties": {
                  "charts": {
                    "description": "Charts describes specific versions of specific Helm charts.",
                    "items": {
                      "description": "Chart describes a specific version of a Helm chart.",
                      "properties": {
                        "name": {
                          "description": "Name specifies the name of the chart.",
                          "type": "string"
                        },
                        "repoURL": {
                          "description": "RepoURL specifies the URL of a Helm chart repository. Classic chart\nrepositories (using HTTP/S) can contain differently named charts. When this\nfield points to such a repository, the Name field will specify the name of\nthe chart within the repository. In the case of a repository within an OCI\nregistry, the URL implicitly points to a specific chart and the Name field\nwill be empty.",
                          "type": "string"
                        },
                        "version": {
                          "description": "Version specifies a particular version of the chart.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "commits": {
                    "description": "Commits describes specific Git repository commits.",
                    "items": {
                      "description": "GitCommit describes a specific commit from a specific Git repository.",
                      "properties": {
                        "author": {
                          "description": "Author is the author of the commit.",
                          "type": "string"
                        },
                        "branch": {
                          "description": "Branch denotes the branch of the repository where this commit was found.",
                          "type": "string"
                        },
                        "committer": {
                          "description": "Committer is the person who committed the commit.",
                          "type": "string"
                        },
                        "id": {
                          "description": "ID is the ID of a specific commit in the Git repository specified by\nRepoURL.",
                          "type": "string"
                        },
                        "message": {
                          "description": "Message is the message associated with the commit. At present, this only\ncontains the first line (subject) of the commit message.",
                          "type": "string"
                        },
                        "repoURL": {
                          "description": "RepoURL is the URL of a Git repository.",
                          "type": "string"
                        },
                        "tag": {
                          "description": "Tag denotes a tag in the repository that matched selection criteria and\nresolved to this commit.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "images": {
                    "description": "Images describes specific versions of specific container images.",
                    "items": {
                      "description": "Image describes a specific version of a container image.",
                      "properties": {
                        "annotations": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "Annotations is a map of arbitrary metadata for the image.",
                          "type": "object"
                        },
                        "digest": {
                          "description": "Digest identifies a specific version of the image in the repository\nspecified by RepoURL. This is a more precise identifier than Tag.",
                          "type": "string"
                        },
                        "gitRepoURL": {
                          "description": "GitRepoURL specifies the URL of a Git repository that contains the source\ncode for the image repository referenced by the RepoURL field if Kargo was\nable to infer it.",
                          "type": "string"
                        },
                        "repoURL": {
                          "description": "RepoURL describes the repository in which the image can be found.",
                          "type": "string"
                        },
                        "tag": {
                          "description": "Tag identifies a specific version of the image in the repository specified\nby RepoURL.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "name": {
                    "description": "Name is system-assigned identifier that is derived deterministically from\nthe contents of the Freight. i.e. Two pieces of Freight can be compared for\nequality by comparing their Names.",
                    "type": "string"
                  },
                  "origin": {
                    "description": "Origin describes a kind of Freight in terms of its origin.",
                    "properties": {
                      "kind": {
                        "description": "Kind is the kind of resource from which Freight may have originated. At\npresent, this can only be \"Warehouse\".",
                        "enum": [
                          "Warehouse"
                        ],
                        "type": "string"
                      },
                      "name": {
                        "description": "Name is the name of the resource of the kind indicated by the Kind field\nfrom which Freight may originate.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "kind",
                      "name"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "freightCollection": {
                "description": "FreightCollection contains the details of the piece of Freight referenced\nby this Promotion as well as any additional Freight that is carried over\nfrom the target Stage's current state.",
                "properties": {
                  "id": {
                    "description": "ID is a unique and deterministically calculated identifier for the\nFreightCollection. It is updated on each use of the UpdateOrPush method.",
                    "type": "string"
                  },
                  "items": {
                    "additionalProperties": {
                      "description": "FreightReference is a simplified representation of a piece of Freight -- not\na root resource type.",
                      "properties": {
                        "charts": {
                          "description": "Charts describes specific versions of specific Helm charts.",
                          "items": {
                            "description": "Chart describes a specific version of a Helm chart.",
                            "properties": {
                              "name": {
                                "description": "Name specifies the name of the chart.",
                                "type": "string"
                              },
                              "repoURL": {
                                "description": "RepoURL specifies the URL of a Helm chart repository. Classic chart\nrepositories (using HTTP/S) can contain differently named charts. When this\nfield points to such a repository, the Name field will specify the name of\nthe chart within the repository. In the case of a repository within an OCI\nregistry, the URL implicitly points to a specific chart and the Name field\nwill be empty.",
                                "type": "string"
                              },
                              "version": {
                                "description": "Version specifies a particular version of the chart.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "commits": {
                          "description": "Commits describes specific Git repository commits.",
                          "items": {
                            "description": "GitCommit describes a specific commit from a specific Git repository.",
                            "properties": {
                              "author": {
                                "description": "Author is the author of the commit.",
                                "type": "string"
                              },
                              "branch": {
                                "description": "Branch denotes the branch of the repository where this commit was found.",
                                "type": "string"
                              },
                              "committer": {
                                "description": "Committer is the person who committed the commit.",
                                "type": "string"
                              },
                              "id": {
                                "description": "ID is the ID of a specific commit in the Git repository specified by\nRepoURL.",
                                "type": "string"
                              },
                              "message": {
                                "description": "Message is the message associated with the commit. At present, this only\ncontains the first line (subject) of the commit message.",
                                "type": "string"
                              },
                              "repoURL": {
                                "description": "RepoURL is the URL of a Git repository.",
                                "type": "string"
                              },
                              "tag": {
                                "description": "Tag denotes a tag in the repository that matched selection criteria and\nresolved to this commit.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "images": {
                          "description": "Images describes specific versions of specific container images.",
                          "items": {
                            "description": "Image describes a specific version of a container image.",
                            "properties": {
                              "annotations": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Annotations is a map of arbitrary metadata for the image.",
                                "type": "object"
                              },
                              "digest": {
                                "description": "Digest identifies a specific version of the image in the repository\nspecified by RepoURL. This is a more precise identifier than Tag.",
                                "type": "string"
                              },
                              "gitRepoURL": {
                                "description": "GitRepoURL specifies the URL of a Git repository that contains the source\ncode for the image repository referenced by the RepoURL field if Kargo was\nable to infer it.",
                                "type": "string"
                              },
                              "repoURL": {
                                "description": "RepoURL describes the repository in which the image can be found.",
                                "type": "string"
                              },
                              "tag": {
                                "description": "Tag identifies a specific version of the image in the repository specified\nby RepoURL.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "name": {
                          "description": "Name is system-assigned identifier that is derived deterministically from\nthe contents of the Freight. i.e. Two pieces of Freight can be compared for\nequality by comparing their Names.",
                          "type": "string"
                        },
                        "origin": {
                          "description": "Origin describes a kind of Freight in terms of its origin.",
                          "properties": {
                            "kind": {
                              "description": "Kind is the kind of resource from which Freight may have originated. At\npresent, this can only be \"Warehouse\".",
                              "enum": [
                                "Warehouse"
                              ],
                              "type": "string"
                            },
                            "name": {
                              "description": "Name is the name of the resource of the kind indicated by the Kind field\nfrom which Freight may originate.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "kind",
                            "name"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "description": "Freight is a map of FreightReference objects, indexed by their Warehouse\norigin.",
                    "type": "object"
                  },
                  "verificationHistory": {
                    "description": "VerificationHistory is a stack of recent VerificationInfo. By default,\nthe last ten VerificationInfo are stored.",
                    "items": {
                      "description": "VerificationInfo contains the details of an instance of a Verification\nprocess.",
                      "properties": {
                        "actor": {
                          "description": "Actor is the name of the entity that initiated or aborted the\nVerification process.",
                          "type": "string"
                        },
                        "analysisRun": {
                          "description": "AnalysisRun is a reference to the Argo Rollouts AnalysisRun that implements\nthe Verification process.",
                          "properties": {
                            "name": {
                              "description": "Name is the name of the AnalysisRun.",
                              "type": "string"
                            },
                            "namespace": {
                              "description": "Namespace is the namespace of the AnalysisRun.",
                              "type": "string"
                            },
                            "phase": {
                              "description": "Phase is the last observed phase of the AnalysisRun referenced by Name.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "name",
                            "namespace",
                            "phase"
                          ],
                          "type": "object"
                        },
                        "finishTime": {
                          "description": "FinishTime is the time at which the Verification process finished.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "id": {
                          "description": "ID is the identifier of the Verification process.",
                          "type": "string"
                        },
                        "message": {
                          "description": "Message may contain additional information about why the verification\nprocess is in its current phase.",
                          "type": "string"
                        },
                        "phase": {
                          "description": "Phase describes the current phase of the Verification process. Generally,\nthis will be a reflection of the underlying AnalysisRun's phase, however,\nthere are exceptions to this, such as in the case where an AnalysisRun\ncannot be launched successfully.",
                          "type": "string"
                        },
                        "startTime": {
                          "description": "StartTime is the time at which the Verification process was started.",
                          "format": "date-time",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object"
              },
              "healthChecks": {
                "description": "HealthChecks contains the health check directives to be executed after\nthe Promotion has completed.",
                "items": {
                  "description": "HealthCheckStep describes a health check directive which can be executed by\na Stage to verify the health of a Promotion result.",
                  "properties": {
                    "config": {
                      "description": "Config is the configuration for the directive.",
                      "x-kubernetes-preserve-unknown-fields": true
                    },
                    "uses": {
                      "description": "Uses identifies a runner that can execute this step.",
                      "minLength": 1,
                      "type": "string"
                    }
                  },
                  "required": [
                    "uses"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "lastHandledRefresh": {
                "description": "LastHandledRefresh holds the value of the most recent AnnotationKeyRefresh\nannotation that was handled by the controller. This field can be used to\ndetermine whether the request to refresh the resource has been handled.",
                "type": "string"
              },
              "message": {
                "description": "Message is a display message about the promotion, including any errors\npreventing the Promotion controller from executing this Promotion.\ni.e. If the Phase field has a value of Failed, this field can be expected\nto explain why.",
                "type": "string"
              },
              "phase": {
                "description": "Phase describes where the Promotion currently is in its lifecycle.",
                "type": "string"
              },
              "state": {
                "description": "State stores the state of the promotion process between reconciliation\nattempts.",
                "x-kubernetes-preserve-unknown-fields": true
              },
              "stepExecutionMetadata": {
                "description": "StepExecutionMetadata tracks metadata pertaining to the execution\nof individual promotion steps.",
                "items": {
                  "description": "StepExecutionMetadata tracks metadata pertaining to the execution of\na promotion step.",
                  "properties": {
                    "alias": {
                      "description": "Alias is the alias of the step.",
                      "type": "string"
                    },
                    "errorCount": {
                      "description": "ErrorCount tracks consecutive failed attempts to execute the step.",
                      "format": "int32",
                      "maximum": 2147483647,
                      "minimum": -2147483648,
                      "type": "integer"
                    },
                    "finishedAt": {
                      "description": "FinishedAt is the time at which the final attempt to execute the step\ncompleted.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "message": {
                      "description": "Message is a display message about the step, including any errors.",
                      "type": "string"
                    },
                    "startedAt": {
                      "description": "StartedAt is the time at which the first attempt to execute the step\nbegan.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "status": {
                      "description": "Status is the high-level outcome of the step.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "spec"
        ],
        "type": "object"
      },
      "else": {
        "not": {}
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": "PromotionTask"
          }
        },
        "required": [
          "kind"
        ]
      },
      "then": {
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "spec": {
            "description": "Spec describes the composition of a PromotionTask, including the\nvariables available to the task and the steps.",
            "properties": {
              "steps": {
                "description": "Steps specifies the directives to be executed as part of this\nPromotionTask. The steps as defined here are inflated into a\nPromotion when it is built from a PromotionTemplate.",
                "items": {
                  "description": "PromotionStep describes a directive to be executed as part of a Promotion.",
                  "properties": {
                    "as": {
                      "description": "As is the alias this step can be referred to as.",
                      "type": "string"
                    },
                    "config": {
                      "description": "Config is opaque configuration for the PromotionStep that is understood\nonly by each PromotionStep's implementation. It is legal to utilize\nexpressions in defining values at any level of this block.\nSee https://docs.kargo.io/user-guide/reference-docs/expressions for details.",
                      "x-kubernetes-preserve-unknown-fields": true
                    },
                    "if": {
                      "description": "If is an optional expression that, if present, must evaluate to a boolean\nvalue. If the expression evaluates to false, the step will be skipped.\nIf the expression does not evaluate to a boolean value, the step will be\nconsidered to have failed.",
                      "type": "string"
                    },
                    "retry": {
                      "description": "Retry is the retry policy for this step.",
                      "properties": {
                        "errorThreshold": {
                          "description": "ErrorThreshold is the number of consecutive times the step must fail (for\nany reason) before retries are abandoned and the entire Promotion is marked\nas failed.\n\nIf this field is set to 0, the effective default will be a step-specific\none. If no step-specific default exists (i.e. is also 0), the effective\ndefault will be the system-wide default of 1.\n\nA value of 1 will cause the Promotion to be marked as failed after just\na single failure; i.e. no retries will be attempted.\n\nThere is no option to specify an infinite number of retries using a value\nsuch as -1.\n\nIn a future release, Kargo is likely to become capable of distinguishing\nbetween recoverable and non-recoverable step failures. At that time, it is\nplanned that unrecoverable failures will not be subject to this threshold\nand will immediately cause the Promotion to be marked as failed without\nfurther condition.",
                          "format": "int32",
                          "maximum": 2147483647,
                          "minimum": -2147483648,
                          "type": "integer"
                        },
                        "timeout": {
                          "description": "Timeout is the soft maximum interval in which a step that returns a Running\nstatus (which typically indicates it's waiting for something to happen)\nmay be retried.\n\nThe maximum is a soft one because the check for whether the interval has\nelapsed occurs AFTER the step has run. This effectively means a step may\nrun ONCE beyond the close of the interval.\n\nIf this field is set to nil, the effective default will be a step-specific\none. If no step-specific default exists (i.e. is also nil), the effective\ndefault will be the system-wide default of 0.\n\nA value of 0 will cause the step to be retried indefinitely unless the\nErrorThreshold is reached.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "task": {
                      "description": "Task is a reference to a PromotionTask that should be inflated into a\nPromotion when it is built from a PromotionTemplate.",
                      "properties": {
                        "kind": {
                          "description": "Kind is the type of the PromotionTask. Can be either PromotionTask or\nClusterPromotionTask, default is PromotionTask.",
                          "enum": [
                            "PromotionTask",
                            "ClusterPromotionTask"
                          ],
                          "type": "string"
                        },
                        "name": {
                          "description": "Name is the name of the (Cluster)PromotionTask.",
                          "maxLength": 253,
                          "minLength": 1,
                          "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
                          "type": "string"
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "type": "object"
                    },
                    "uses": {
                      "description": "Uses identifies a runner that can execute this step.",
                      "minLength": 1,
                      "type": "string"
                    },
                    "vars": {
                      "description": "Vars is a list of variables that can be referenced by expressions in\nthe step's Config. The values override the values specified in the\nPromotionSpec.",
                      "items": {
                        "description": "PromotionVariable describes a single variable that may be referenced by\nexpressions in promotion steps.",
                        "properties": {
                          "name": {
                            "description": "Name is the name of the variable.",
                            "minLength": 1,
                            "pattern": "^[a-zA-Z_]\\w*$",
                            "type": "string"
                          },
                          "value": {
                            "description": "Value is the value of the variable. It is allowed to utilize expressions\nin the value.\nSee https://docs.kargo.io/user-guide/reference-docs/expressions for details.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object",
                  "x-kubernetes-validations": [
                    {
                      "message": "PromotionTask step must have uses set and must not reference another task",
                      "rule": "has(self.uses) && !has(self.task)"
                    }
                  ]
                },
                "minItems": 1,
                "type": "array"
              },
              "vars": {
                "description": "Vars specifies the variables available to the PromotionTask. The\nvalues of these variables are the default values that can be\noverridden by the step referencing the task.",
                "items": {
                  "description": "PromotionVariable describes a single variable that may be referenced by\nexpressions in promotion steps.",
                  "properties": {
                    "name": {
                      "description": "Name is the name of the variable.",
                      "minLength": 1,
                      "pattern": "^[a-zA-Z_]\\w*$",
                      "type": "string"
                    },
                    "value": {
                      "description": "Value is the value of the variable. It is allowed to utilize expressions\nin the value.\nSee https://docs.kargo.io/user-guide/reference-docs/expressions for details.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object"
                },
                "type": "array"
              }
            },
            "required": [
              "steps"
            ],
            "type": "object"
          }
        },
        "required": [
          "spec"
        ],
        "type": "object"
      },
      "else": {
        "not": {}
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": "Stage"
          }
        },
        "required": [
          "kind"
        ]
      },
      "then": {
        "description": "Stage is the Kargo API's main type.",
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "spec": {
            "description": "Spec describes sources of Freight used by the Stage and how to incorporate\nFreight into the Stage.",
            "properties": {
              "promotionTemplate": {
                "description": "PromotionTemplate describes how to incorporate Freight into the Stage\nusing a Promotion.",
                "properties": {
                  "spec": {
                    "description": "PromotionTemplateSpec describes the (partial) specification of a Promotion\nfor a Stage. This is a template that can be used to create a Promotion for a\nStage.",
                    "properties": {
                      "steps": {
                        "description": "Steps specifies the directives to be executed as part of a Promotion.\nThe order in which the directives are executed is the order in which they\nare listed in this field.",
                        "items": {
                          "description": "PromotionStep describes a directive to be executed as part of a Promotion.",
                          "properties": {
                            "as": {
                              "description": "As is the alias this step can be referred to as.",
                              "type": "string"
                            },
                            "config": {
                              "description": "Config is opaque configuration for the PromotionStep that is understood\nonly by each PromotionStep's implementation. It is legal to utilize\nexpressions in defining values at any level of this block.\nSee https://docs.kargo.io/user-guide/reference-docs/expressions for details.",
                              "x-kubernetes-preserve-unknown-fields": true
                            },
                            "if": {
                              "description": "If is an optional expression that, if present, must evaluate to a boolean\nvalue. If the expression evaluates to false, the step will be skipped.\nIf the expression does not evaluate to a boolean value, the step will be\nconsidered to have failed.",
                              "type": "string"
                            },
                            "retry": {
                              "description": "Retry is the retry policy for this step.",
                              "properties": {
                                "errorThreshold": {
                                  "description": "ErrorThreshold is the number of consecutive times the step must fail (for\nany reason) before retries are abandoned and the entire Promotion is marked\nas failed.\n\nIf this field is set to 0, the effective default will be a step-specific\none. If no step-specific default exists (i.e. is also 0), the effective\ndefault will be the system-wide default of 1.\n\nA value of 1 will cause the Promotion to be marked as failed after just\na single failure; i.e. no retries will be attempted.\n\nThere is no option to specify an infinite number of retries using a value\nsuch as -1.\n\nIn a future release, Kargo is likely to become capable of distinguishing\nbetween recoverable and non-recoverable step failures. At that time, it is\nplanned that unrecoverable failures will not be subject to this threshold\nand will immediately cause the Promotion to be marked as failed without\nfurther condition.",
                                  "format": "int32",
                                  "maximum": 2147483647,
                                  "minimum": -2147483648,
                                  "type": "integer"
                                },
                                "timeout": {
                                  "description": "Timeout is the soft maximum interval in which a step that returns a Running\nstatus (which typically indicates it's waiting for something to happen)\nmay be retried.\n\nThe maximum is a soft one because the check for whether the interval has\nelapsed occurs AFTER the step has run. This effectively means a step may\nrun ONCE beyond the close of the interval.\n\nIf this field is set to nil, the effective default will be a step-specific\none. If no step-specific default exists (i.e. is also nil), the effective\ndefault will be the system-wide default of 0.\n\nA value of 0 will cause the step to be retried indefinitely unless the\nErrorThreshold is reached.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "task": {
                              "description": "Task is a reference to a PromotionTask that should be inflated into a\nPromotion when it is built from a PromotionTemplate.",
                              "properties": {
                                "kind": {
                                  "description": "Kind is the type of the PromotionTask. Can be either PromotionTask or\nClusterPromotionTask, default is PromotionTask.",
                                  "enum": [
                                    "PromotionTask",
                                    "ClusterPromotionTask"
                                  ],
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name is the name of the (Cluster)PromotionTask.",
                                  "maxLength": 253,
                                  "minLength": 1,
                                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "name"
                              ],
                              "type": "object"
                            },
                            "uses": {
                              "description": "Uses identifies a runner that can execute this step.",
                              "minLength": 1,
                              "type": "string"
                            },
                            "vars": {
                              "description": "Vars is a list of variables that can be referenced by expressions in\nthe step's Config. The values override the values specified in the\nPromotionSpec.",
                              "items": {
                                "description": "PromotionVariable describes a single variable that may be referenced by\nexpressions in promotion steps.",
                                "properties": {
                                  "name": {
                                    "description": "Name is the name of the variable.",
                                    "minLength": 1,
                                    "pattern": "^[a-zA-Z_]\\w*$",
                                    "type": "string"
                                  },
                                  "value": {
                                    "description": "Value is the value of the variable. It is allowed to utilize expressions\nin the value.\nSee https://docs.kargo.io/user-guide/reference-docs/expressions for details.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "name"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object",
                          "x-kubernetes-validations": [
                            {
                              "message": "PromotionTemplate step must have exactly one of uses or task set",
                              "rule": "(has(self.uses) ? !has(self.task) : has(self.task))"
                            }
                          ]
                        },
                        "minItems": 1,
                        "type": "array"
                      },
                      "vars": {
                        "description": "Vars is a list of variables that can be referenced by expressions in\npromotion steps.",
                        "items": {
                          "description": "PromotionVariable describes a single variable that may be referenced by\nexpressions in promotion steps.",
                          "properties": {
                            "name": {
                              "description": "Name is the name of the variable.",
                              "minLength": 1,
                              "pattern": "^[a-zA-Z_]\\w*$",
                              "type": "string"
                            },
                            "value": {
                              "description": "Value is the value of the variable. It is allowed to utilize expressions\nin the value.\nSee https://docs.kargo.io/user-guide/reference-docs/expressions for details.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "name"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "spec"
                ],
                "type": "object"
              },
              "requestedFreight": {
                "description": "RequestedFreight expresses the Stage's need for certain pieces of Freight,\neach having originated from a particular Warehouse. This list must be\nnon-empty. In the common case, a Stage will request Freight having\noriginated from just one specific Warehouse. In advanced cases, requesting\nFreight from multiple Warehouses provides a method of advancing new\nartifacts of different types through parallel pipelines at different\nspeeds. This can be useful, for instance, if a Stage is home to multiple\nmicroservices that are independently versioned.",
                "items": {
                  "description": "FreightRequest expresses a Stage's need for Freight having originated from a\nparticular Warehouse.",
                  "properties": {
                    "origin": {
                      "description": "Origin specifies from where the requested Freight must have originated.\nThis is a required field.",
                      "properties": {
                        "kind": {
                          "description": "Kind is the kind of resource from which Freight may have originated. At\npresent, this can only be \"Warehouse\".",
                          "enum": [
                            "Warehouse"
                          ],
                          "type": "string"
                        },
                        "name": {
                          "description": "Name is the name of the resource of the kind indicated by the Kind field\nfrom which Freight may originate.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "kind",
                        "name"
                      ],
                      "type": "object"
                    },
                    "sources": {
                      "description": "Sources describes where the requested Freight may be obtained from. This is\na required field.",
                      "properties": {
                        "availabilityStrategy": {
                          "description": "AvailabilityStrategy specifies the semantics for how requested Freight is\nmade available to the Stage. This field is optional. When left unspecified,\nthe field is implicitly treated as if its value were \"OneOf\".",
                          "enum": [
                            "All",
                            "OneOf",
                            ""
                          ],
                          "type": "string"
                        },
                        "direct": {
                          "description": "Direct indicates the requested Freight may be obtained directly from the\nWarehouse from which it originated. If this field's value is false, then\nthe value of the Stages field must be non-empty. i.e. Between the two\nfields, at least one source must be specified.",
                          "type": "boolean"
                        },
                        "requiredSoakTime": {
                          "description": "RequiredSoakTime specifies a minimum duration for which the requested\nFreight must have continuously occupied (\"soaked in\") in an upstream Stage\nbefore becoming available for promotion to this Stage. This is an optional\nfield. If nil or zero, no soak time is required. Any soak time requirement\nis in ADDITION to the requirement that Freight be verified in an upstream\nStage to become available for promotion to this Stage, although a manual\napproval for promotion to this Stage will supersede any soak time\nrequirement.",
                          "pattern": "^([0-9]+(\\.[0-9]+)?(s|m|h))+$",
                          "type": "string"
                        },
                        "stages": {
                          "description": "Stages identifies other \"upstream\" Stages as potential sources of the\nrequested Freight. If this field's value is empty, then the value of the\nDirect field must be true. i.e. Between the two fields, at least on source\nmust be specified.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "required": [
                    "origin",
                    "sources"
                  ],
                  "type": "object"
                },
                "minItems": 1,
                "type": "array"
              },
              "shard": {
                "description": "Shard is the name of the shard that this Stage belongs to. This is an\noptional field. If not specified, the Stage will belong to the default\nshard. A defaulting webhook will sync the value of the\nkargo.akuity.io/shard label with the value of this field. When this field\nis empty, the webhook will ensure that label is absent.",
                "type": "string"
              },
              "verification": {
                "description": "Verification describes how to verify a Stage's current Freight is fit for\npromotion downstream.",
                "properties": {
                  "analysisRunMetadata": {
                    "description": "AnalysisRunMetadata contains optional metadata that should be applied to\nall AnalysisRuns.",
                    "properties": {
                      "annotations": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Additional annotations to apply to an AnalysisRun.",
                        "type": "object"
                      },
                      "labels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Additional labels to apply to an AnalysisRun.",
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "analysisTemplates": {
                    "description": "AnalysisTemplates is a list of AnalysisTemplates from which AnalysisRuns\nshould be created to verify a Stage's current Freight is fit to be promoted\ndownstream.",
                    "items": {
                      "description": "AnalysisTemplateReference is a reference to an AnalysisTemplate.",
                      "properties": {
                        "kind": {
                          "description": "Kind is the type of the AnalysisTemplate. Can be either AnalysisTemplate or\nClusterAnalysisTemplate, default is AnalysisTemplate.",
                          "enum": [
                            "AnalysisTemplate",
                            "ClusterAnalysisTemplate"
                          ],
                          "type": "string"
                        },
                        "name": {
                          "description": "Name is the name of the AnalysisTemplate in the same project/namespace as\nthe Stage.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "args": {
                    "description": "Args lists arguments that should be added to all AnalysisRuns.",
                    "items": {
                      "description": "AnalysisRunArgument represents an argument to be added to an AnalysisRun.",
                      "properties": {
                        "name": {
                          "description": "Name is the name of the argument.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Value is the value of the argument.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "name",
                        "value"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            },
            "required": [
              "requestedFreight"
            ],
            "type": "object"
          },
          "status": {
            "description": "Status describes the Stage's current and recent Freight, health, and more.",
            "properties": {
              "conditions": {
                "description": "Conditions contains the last observations of the Stage's current\nstate.",
                "items": {
                  "description": "Condition contains details for one aspect of the current state of this API Resource.",
                  "properties": {
                    "lastTransitionTime": {
                      "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "message": {
                      "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                      "maxLength": 32768,
                      "type": "string"
                    },
                    "observedGeneration": {
                      "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                      "format": "int64",
                      "maximum": 9223372036854776000,
                      "minimum": 0,
                      "type": "integer"
                    },
                    "reason": {
                      "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                      "maxLength": 1024,
                      "minLength": 1,
                      "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                      "type": "string"
                    },
                    "status": {
                      "description": "status of the condition, one of True, False, Unknown.",
                      "enum": [
                        "True",
                        "False",
                        "Unknown"
                      ],
                      "type": "string"
                    },
                    "type": {
                      "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                      "maxLength": 316,
                      "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                      "type": "string"
                    }
                  },
                  "required": [
                    "lastTransitionTime",
                    "message",
                    "reason",
                    "status",
                    "type"
                  ],
                  "type": "object"
                },
                "type": "array",
                "x-kubernetes-list-map-keys": [
                  "type"
                ],
                "x-kubernetes-list-type": "map"
              },
              "currentPromotion": {
                "description": "CurrentPromotion is a reference to the currently Running promotion.",
                "properties": {
                  "finishedAt": {
                    "description": "FinishedAt is the time at which the Promotion was completed.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "freight": {
                    "description": "Freight is the freight being promoted.",
                    "properties": {
                      "charts": {
                        "description": "Charts describes specific versions of specific Helm charts.",
                        "items": {
                          "description": "Chart describes a specific version of a Helm chart.",
                          "properties": {
                            "name": {
                              "description": "Name specifies the name of the chart.",
                              "type": "string"
                            },
                            "repoURL": {
                              "description": "RepoURL specifies the URL of a Helm chart repository. Classic chart\nrepositories (using HTTP/S) can contain differently named charts. When this\nfield points to such a repository, the Name field will specify the name of\nthe chart within the repository. In the case of a repository within an OCI\nregistry, the URL implicitly points to a specific chart and the Name field\nwill be empty.",
                              "type": "string"
                            },
                            "version": {
                              "description": "Version specifies a particular version of the chart.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "commits": {
                        "description": "Commits describes specific Git repository commits.",
                        "items": {
                          "description": "GitCommit describes a specific commit from a specific Git repository.",
                          "properties": {
                            "author": {
                              "description": "Author is the author of the commit.",
                              "type": "string"
                            },
                            "branch": {
                              "description": "Branch denotes the branch of the repository where this commit was found.",
                              "type": "string"
                            },
                            "committer": {
                              "description": "Committer is the person who committed the commit.",
                              "type": "string"
                            },
                            "id": {
                              "description": "ID is the ID of a specific commit in the Git repository specified by\nRepoURL.",
                              "type": "string"
                            },
                            "message": {
                              "description": "Message is the message associated with the commit. At present, this only\ncontains the first line (subject) of the commit message.",
                              "type": "string"
                            },
                            "repoURL": {
                              "description": "RepoURL is the URL of a Git repository.",
                              "type": "string"
                            },
                            "tag": {
                              "description": "Tag denotes a tag in the repository that matched selection criteria and\nresolved to this commit.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "images": {
                        "description": "Images describes specific versions of specific container images.",
                        "items": {
                          "description": "Image describes a specific version of a container image.",
                          "properties": {
                            "annotations": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "description": "Annotations is a map of arbitrary metadata for the image.",
                              "type": "object"
                            },
                            "digest": {
                              "description": "Digest identifies a specific version of the image in the repository\nspecified by RepoURL. This is a more precise identifier than Tag.",
                              "type": "string"
                            },
                            "gitRepoURL": {
                              "description": "GitRepoURL specifies the URL of a Git repository that contains the source\ncode for the image repository referenced by the RepoURL field if Kargo was\nable to infer it.",
                              "type": "string"
                            },
                            "repoURL": {
                              "description": "RepoURL describes the repository in which the image can be found.",
                              "type": "string"
                            },
                            "tag": {
                              "description": "Tag identifies a specific version of the image in the repository specified\nby RepoURL.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "name": {
                        "description": "Name is system-assigned identifier that is derived deterministically from\nthe contents of the Freight. i.e. Two pieces of Freight can be compared for\nequality by comparing their Names.",
                        "type": "string"
                      },
                      "origin": {
                        "description": "Origin describes a kind of Freight in terms of its origin.",
                        "properties": {
                          "kind": {
                            "description": "Kind is the kind of resource from which Freight may have originated. At\npresent, this can only be \"Warehouse\".",
                            "enum": [
                              "Warehouse"
                            ],
                            "type": "string"
                          },
                          "name": {
                            "description": "Name is the name of the resource of the kind indicated by the Kind field\nfrom which Freight may originate.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "kind",
                          "name"
                        ],
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "name": {
                    "description": "Name is the name of the Promotion.",
                    "type": "string"
                  },
                  "status": {
                    "description": "Status is the (optional) status of the Promotion.",
                    "properties": {
                      "currentStep": {
                        "description": "CurrentStep is the index of the current promotion step being executed. This\npermits steps that have already run successfully to be skipped on\nsubsequent reconciliations attempts.",
                        "format": "int64",
                        "maximum": 9223372036854776000,
                        "minimum": -9223372036854776000,
                        "type": "integer"
                      },
                      "finishedAt": {
                        "description": "FinishedAt is the time when the promotion was completed.",
                        "format": "date-time",
                        "type": "string"
                      },
                      "freight": {
                        "description": "Freight is the detail of the piece of freight that was referenced by this promotion.",
                        "properties": {
                          "charts": {
                            "description": "Charts describes specific versions of specific Helm charts.",
                            "items": {
                              "description": "Chart describes a specific version of a Helm chart.",
                              "properties": {
                                "name": {
                                  "description": "Name specifies the name of the chart.",
                                  "type": "string"
                                },
                                "repoURL": {
                                  "description": "RepoURL specifies the URL of a Helm chart repository. Classic chart\nrepositories (using HTTP/S) can contain differently named charts. When this\nfield points to such a repository, the Name field will specify the name of\nthe chart within the repository. In the case of a repository within an OCI\nregistry, the URL implicitly points to a specific chart and the Name field\nwill be empty.",
                                  "type": "string"
                                },
                                "version": {
                                  "description": "Version specifies a particular version of the chart.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "commits": {
                            "description": "Commits describes specific Git repository commits.",
                            "items": {
                              "description": "GitCommit describes a specific commit from a specific Git repository.",
                              "properties": {
                                "author": {
                                  "description": "Author is the author of the commit.",
                                  "type": "string"
                                },
                                "branch": {
                                  "description": "Branch denotes the branch of the repository where this commit was found.",
                                  "type": "string"
                                },
                                "committer": {
                                  "description": "Committer is the person who committed the commit.",
                                  "type": "string"
                                },
                                "id": {
                                  "description": "ID is the ID of a specific commit in the Git repository specified by\nRepoURL.",
                                  "type": "string"
                                },
                                "message": {
                                  "description": "Message is the message associated with the commit. At present, this only\ncontains the first line (subject) of the commit message.",
                                  "type": "string"
                                },
                                "repoURL": {
                                  "description": "RepoURL is the URL of a Git repository.",
                                  "type": "string"
                                },
                                "tag": {
                                  "description": "Tag denotes a tag in the repository that matched selection criteria and\nresolved to this commit.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "images": {
                            "description": "Images describes specific versions of specific container images.",
                            "items": {
                              "description": "Image describes a specific version of a container image.",
                              "properties": {
                                "annotations": {
                                  "additionalProperties": {
                                    "type": "string"
                                  },
                                  "description": "Annotations is a map of arbitrary metadata for the image.",
                                  "type": "object"
                                },
                                "digest": {
                                  "description": "Digest identifies a specific version of the image in the repository\nspecified by RepoURL. This is a more precise identifier than Tag.",
                                  "type": "string"
                                },
                                "gitRepoURL": {
                                  "description": "GitRepoURL specifies the URL of a Git repository that contains the source\ncode for the image repository referenced by the RepoURL field if Kargo was\nable to infer it.",
                                  "type": "string"
                                },
                                "repoURL": {
                                  "description": "RepoURL describes the repository in which the image can be found.",
                                  "type": "string"
                                },
                                "tag": {
                                  "description": "Tag identifies a specific version of the image in the repository specified\nby RepoURL.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "name": {
                            "description": "Name is system-assigned identifier that is derived deterministically from\nthe contents of the Freight. i.e. Two pieces of Freight can be compared for\nequality by comparing their Names.",
                            "type": "string"
                          },
                          "origin": {
                            "description": "Origin describes a kind of Freight in terms of its origin.",
                            "properties": {
                              "kind": {
                                "description": "Kind is the kind of resource from which Freight may have originated. At\npresent, this can only be \"Warehouse\".",
                                "enum": [
                                  "Warehouse"
                                ],
                                "type": "string"
                              },
                              "name": {
                                "description": "Name is the name of the resource of the kind indicated by the Kind field\nfrom which Freight may originate.",
                                "type": "string"
                              }
                            },
                            "required": [
                              "kind",
                              "name"
                            ],
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "freightCollection": {
                        "description": "FreightCollection contains the details of the piece of Freight referenced\nby this Promotion as well as any additional Freight that is carried over\nfrom the target Stage's current state.",
                        "properties": {
                          "id": {
                            "description": "ID is a unique and deterministically calculated identifier for the\nFreightCollection. It is updated on each use of the UpdateOrPush method.",
                            "type": "string"
                          },
                          "items": {
                            "additionalProperties": {
                              "description": "FreightReference is a simplified representation of a piece of Freight -- not\na root resource type.",
                              "properties": {
                                "charts": {
                                  "description": "Charts describes specific versions of specific Helm charts.",
                                  "items": {
                                    "description": "Chart describes a specific version of a Helm chart.",
                                    "properties": {
                                      "name": {
                                        "description": "Name specifies the name of the chart.",
                                        "type": "string"
                                      },
                                      "repoURL": {
                                        "description": "RepoURL specifies the URL of a Helm chart repository. Classic chart\nrepositories (using HTTP/S) can contain differently named charts. When this\nfield points to such a repository, the Name field will specify the name of\nthe chart within the repository. In the case of a repository within an OCI\nregistry, the URL implicitly points to a specific chart and the Name field\nwill be empty.",
                                        "type": "string"
                                      },
                                      "version": {
                                        "description": "Version specifies a particular version of the chart.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "commits": {
                                  "description": "Commits describes specific Git repository commits.",
                                  "items": {
                                    "description": "GitCommit describes a specific commit from a specific Git repository.",
                                    "properties": {
                                      "author": {
                                        "description": "Author is the author of the commit.",
                                        "type": "string"
                                      },
                                      "branch": {
                                        "description": "Branch denotes the branch of the repository where this commit was found.",
                                        "type": "string"
                                      },
                                      "committer": {
                                        "description": "Committer is the person who committed the commit.",
                                        "type": "string"
                                      },
                                      "id": {
                                        "description": "ID is the ID of a specific commit in the Git repository specified by\nRepoURL.",
                                        "type": "string"
                                      },
                                      "message": {
                                        "description": "Message is the message associated with the commit. At present, this only\ncontains the first line (subject) of the commit message.",
                                        "type": "string"
                                      },
                                      "repoURL": {
                                        "description": "RepoURL is the URL of a Git repository.",
                                        "type": "string"
                                      },
                                      "tag": {
                                        "description": "Tag denotes a tag in the repository that matched selection criteria and\nresolved to this commit.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "images": {
                                  "description": "Images describes specific versions of specific container images.",
                                  "items": {
                                    "description": "Image describes a specific version of a container image.",
                                    "properties": {
                                      "annotations": {
                                        "additionalProperties": {
                                          "type": "string"
                                        },
                                        "description": "Annotations is a map of arbitrary metadata for the image.",
                                        "type": "object"
                                      },
                                      "digest": {
                                        "description": "Digest identifies a specific version of the image in the repository\nspecified by RepoURL. This is a more precise identifier than Tag.",
                                        "type": "string"
                                      },
                                      "gitRepoURL": {
                                        "description": "GitRepoURL specifies the URL of a Git repository that contains the source\ncode for the image repository referenced by the RepoURL field if Kargo was\nable to infer it.",
                                        "type": "string"
                                      },
                                      "repoURL": {
                                        "description": "RepoURL describes the repository in which the image can be found.",
                                        "type": "string"
                                      },
                                      "tag": {
                                        "description": "Tag identifies a specific version of the image in the repository specified\nby RepoURL.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "name": {
                                  "description": "Name is system-assigned identifier that is derived deterministically from\nthe contents of the Freight. i.e. Two pieces of Freight can be compared for\nequality by comparing their Names.",
                                  "type": "string"
                                },
                                "origin": {
                                  "description": "Origin describes a kind of Freight in terms of its origin.",
                                  "properties": {
                                    "kind": {
                                      "description": "Kind is the kind of resource from which Freight may have originated. At\npresent, this can only be \"Warehouse\".",
                                      "enum": [
                                        "Warehouse"
                                      ],
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "Name is the name of the resource of the kind indicated by the Kind field\nfrom which Freight may originate.",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "kind",
                                    "name"
                                  ],
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "description": "Freight is a map of FreightReference objects, indexed by their Warehouse\norigin.",
                            "type": "object"
                          },
                          "verificationHistory": {
                            "description": "VerificationHistory is a stack of recent VerificationInfo. By default,\nthe last ten VerificationInfo are stored.",
                            "items": {
                              "description": "VerificationInfo contains the details of an instance of a Verification\nprocess.",
                              "properties": {
                                "actor": {
                                  "description": "Actor is the name of the entity that initiated or aborted the\nVerification process.",
                                  "type": "string"
                                },
                                "analysisRun": {
                                  "description": "AnalysisRun is a reference to the Argo Rollouts AnalysisRun that implements\nthe Verification process.",
                                  "properties": {
                                    "name": {
                                      "description": "Name is the name of the AnalysisRun.",
                                      "type": "string"
                                    },
                                    "namespace": {
                                      "description": "Namespace is the namespace of the AnalysisRun.",
                                      "type": "string"
                                    },
                                    "phase": {
                                      "description": "Phase is the last observed phase of the AnalysisRun referenced by Name.",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "name",
                                    "namespace",
                                    "phase"
                                  ],
                                  "type": "object"
                                },
                                "finishTime": {
                                  "description": "FinishTime is the time at which the Verification process finished.",
                                  "format": "date-time",
                                  "type": "string"
                                },
                                "id": {
                                  "description": "ID is the identifier of the Verification process.",
                                  "type": "string"
                                },
                                "message": {
                                  "description": "Message may contain additional information about why the verification\nprocess is in its current phase.",
                                  "type": "string"
                                },
                                "phase": {
                                  "description": "Phase describes the current phase of the Verification process. Generally,\nthis will be a reflection of the underlying AnalysisRun's phase, however,\nthere are exceptions to this, such as in the case where an AnalysisRun\ncannot be launched successfully.",
                                  "type": "string"
                                },
                                "startTime": {
                                  "description": "StartTime is the time at which the Verification process was started.",
                                  "format": "date-time",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "type": "object"
                      },
                      "healthChecks": {
                        "description": "HealthChecks contains the health check directives to be executed after\nthe Promotion has completed.",
                        "items": {
                          "description": "HealthCheckStep describes a health check directive which can be executed by\na Stage to verify the health of a Promotion result.",
                          "properties": {
                            "config": {
                              "description": "Config is the configuration for the directive.",
                              "x-kubernetes-preserve-unknown-fields": true
                            },
                            "uses": {
                              "description": "Uses identifies a runner that can execute this step.",
                              "minLength": 1,
                              "type": "string"
                            }
                          },
                          "required": [
                            "uses"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "lastHandledRefresh": {
                        "description": "LastHandledRefresh holds the value of the most recent AnnotationKeyRefresh\nannotation that was handled by the controller. This field can be used to\ndetermine whether the request to refresh the resource has been handled.",
                        "type": "string"
                      },
                      "message": {
                        "description": "Message is a display message about the promotion, including any errors\npreventing the Promotion controller from executing this Promotion.\ni.e. If the Phase field has a value of Failed, this field can be expected\nto explain why.",
                        "type": "string"
                      },
                      "phase": {
                        "description": "Phase describes where the Promotion currently is in its lifecycle.",
                        "type": "string"
                      },
                      "state": {
                        "description": "State stores the state of the promotion process between reconciliation\nattempts.",
                        "x-kubernetes-preserve-unknown-fields": true
                      },
                      "stepExecutionMetadata": {
                        "description": "StepExecutionMetadata tracks metadata pertaining to the execution\nof individual promotion steps.",
                        "items": {
                          "description": "StepExecutionMetadata tracks metadata pertaining to the execution of\na promotion step.",
                          "properties": {
                            "alias": {
                              "description": "Alias is the alias of the step.",
                              "type": "string"
                            },
                            "errorCount": {
                              "description": "ErrorCount tracks consecutive failed attempts to execute the step.",
                              "format": "int32",
                              "maximum": 2147483647,
                              "minimum": -2147483648,
                              "type": "integer"
                            },
                            "finishedAt": {
                              "description": "FinishedAt is the time at which the final attempt to execute the step\ncompleted.",
                              "format": "date-time",
                              "type": "string"
                            },
                            "message": {
                              "description": "Message is a display message about the step, including any errors.",
                              "type": "string"
                            },
                            "startedAt": {
                              "description": "StartedAt is the time at which the first attempt to execute the step\nbegan.",
                              "format": "date-time",
                              "type": "string"
                            },
                            "status": {
                              "description": "Status is the high-level outcome of the step.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              },
              "freightHistory": {
                "description": "FreightHistory is a list of recent Freight selections that were deployed\nto the Stage. By default, the last ten Freight selections are stored.\nThe first item in the list is the most recent Freight selection and\ncurrently deployed to the Stage, subsequent items are older selections.",
                "items": {
                  "description": "FreightCollection is a collection of FreightReferences, each of which\nrepresents a piece of Freight that has been selected for deployment to a\nStage.",
                  "properties": {
                    "id": {
                      "description": "ID is a unique and deterministically calculated identifier for the\nFreightCollection. It is updated on each use of the UpdateOrPush method.",
                      "type": "string"
                    },
                    "items": {
                      "additionalProperties": {
                        "description": "FreightReference is a simplified representation of a piece of Freight -- not\na root resource type.",
                        "properties": {
                          "charts": {
                            "description": "Charts describes specific versions of specific Helm charts.",
                            "items": {
                              "description": "Chart describes a specific version of a Helm chart.",
                              "properties": {
                                "name": {
                                  "description": "Name specifies the name of the chart.",
                                  "type": "string"
                                },
                                "repoURL": {
                                  "description": "RepoURL specifies the URL of a Helm chart repository. Classic chart\nrepositories (using HTTP/S) can contain differently named charts. When this\nfield points to such a repository, the Name field will specify the name of\nthe chart within the repository. In the case of a repository within an OCI\nregistry, the URL implicitly points to a specific chart and the Name field\nwill be empty.",
                                  "type": "string"
                                },
                                "version": {
                                  "description": "Version specifies a particular version of the chart.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "commits": {
                            "description": "Commits describes specific Git repository commits.",
                            "items": {
                              "description": "GitCommit describes a specific commit from a specific Git repository.",
                              "properties": {
                                "author": {
                                  "description": "Author is the author of the commit.",
                                  "type": "string"
                                },
                                "branch": {
                                  "description": "Branch denotes the branch of the repository where this commit was found.",
                                  "type": "string"
                                },
                                "committer": {
                                  "description": "Committer is the person who committed the commit.",
                                  "type": "string"
                                },
                                "id": {
                                  "description": "ID is the ID of a specific commit in the Git repository specified by\nRepoURL.",
                                  "type": "string"
                                },
                                "message": {
                                  "description": "Message is the message associated with the commit. At present, this only\ncontains the first line (subject) of the commit message.",
                                  "type": "string"
                                },
                                "repoURL": {
                                  "description": "RepoURL is the URL of a Git repository.",
                                  "type": "string"
                                },
                                "tag": {
                                  "description": "Tag denotes a tag in the repository that matched selection criteria and\nresolved to this commit.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "images": {
                            "description": "Images describes specific versions of specific container images.",
                            "items": {
                              "description": "Image describes a specific version of a container image.",
                              "properties": {
                                "annotations": {
                                  "additionalProperties": {
                                    "type": "string"
                                  },
                                  "description": "Annotations is a map of arbitrary metadata for the image.",
                                  "type": "object"
                                },
                                "digest": {
                                  "description": "Digest identifies a specific version of the image in the repository\nspecified by RepoURL. This is a more precise identifier than Tag.",
                                  "type": "string"
                                },
                                "gitRepoURL": {
                                  "description": "GitRepoURL specifies the URL of a Git repository that contains the source\ncode for the image repository referenced by the RepoURL field if Kargo was\nable to infer it.",
                                  "type": "string"
                                },
                                "repoURL": {
                                  "description": "RepoURL describes the repository in which the image can be found.",
                                  "type": "string"
                                },
                                "tag": {
                                  "description": "Tag identifies a specific version of the image in the repository specified\nby RepoURL.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "name": {
                            "description": "Name is system-assigned identifier that is derived deterministically from\nthe contents of the Freight. i.e. Two pieces of Freight can be compared for\nequality by comparing their Names.",
                            "type": "string"
                          },
                          "origin": {
                            "description": "Origin describes a kind of Freight in terms of its origin.",
                            "properties": {
                              "kind": {
                                "description": "Kind is the kind of resource from which Freight may have originated. At\npresent, this can only be \"Warehouse\".",
                                "enum": [
                                  "Warehouse"
                                ],
                                "type": "string"
                              },
                              "name": {
                                "description": "Name is the name of the resource of the kind indicated by the Kind field\nfrom which Freight may originate.",
                                "type": "string"
                              }
                            },
                            "required": [
                              "kind",
                              "name"
                            ],
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "description": "Freight is a map of FreightReference objects, indexed by their Warehouse\norigin.",
                      "type": "object"
                    },
                    "verificationHistory": {
                      "description": "VerificationHistory is a stack of recent VerificationInfo. By default,\nthe last ten VerificationInfo are stored.",
                      "items": {
                        "description": "VerificationInfo contains the details of an instance of a Verification\nprocess.",
                        "properties": {
                          "actor": {
                            "description": "Actor is the name of the entity that initiated or aborted the\nVerification process.",
                            "type": "string"
                          },
                          "analysisRun": {
                            "description": "AnalysisRun is a reference to the Argo Rollouts AnalysisRun that implements\nthe Verification process.",
                            "properties": {
                              "name": {
                                "description": "Name is the name of the AnalysisRun.",
                                "type": "string"
                              },
                              "namespace": {
                                "description": "Namespace is the namespace of the AnalysisRun.",
                                "type": "string"
                              },
                              "phase": {
                                "description": "Phase is the last observed phase of the AnalysisRun referenced by Name.",
                                "type": "string"
                              }
                            },
                            "required": [
                              "name",
                              "namespace",
                              "phase"
                            ],
                            "type": "object"
                          },
                          "finishTime": {
                            "description": "FinishTime is the time at which the Verification process finished.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "id": {
                            "description": "ID is the identifier of the Verification process.",
                            "type": "string"
                          },
                          "message": {
                            "description": "Message may contain additional information about why the verification\nprocess is in its current phase.",
                            "type": "string"
                          },
                          "phase": {
                            "description": "Phase describes the current phase of the Verification process. Generally,\nthis will be a reflection of the underlying AnalysisRun's phase, however,\nthere are exceptions to this, such as in the case where an AnalysisRun\ncannot be launched successfully.",
                            "type": "string"
                          },
                          "startTime": {
                            "description": "StartTime is the time at which the Verification process was started.",
                            "format": "date-time",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "id"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "freightSummary": {
                "description": "FreightSummary is human-readable text maintained by the controller that\nsummarizes what Freight is currently deployed to the Stage. For Stages that\nrequest a single piece of Freight AND the request has been fulfilled, this\nfield will simply contain the name of the Freight. For Stages that request\na single piece of Freight AND the request has NOT been fulfilled, or for\nStages that request multiple pieces of Freight, this field will contain a\nsummary of fulfilled/requested Freight. The existence of this field is a\nworkaround for kubectl limitations so that this complex but valuable\ninformation can be displayed in a column in response to `kubectl get\nstages`.",
                "type": "string"
              },
              "health": {
                "description": "Health is the Stage's last observed health.",
                "properties": {
                  "config": {
                    "description": "Config is the opaque configuration of all health checks performed on this\nStage.",
                    "x-kubernetes-preserve-unknown-fields": true
                  },
                  "issues": {
                    "description": "Issues clarifies why a Stage in any state other than Healthy is in that\nstate. This field will always be the empty when a Stage is Healthy.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "output": {
                    "description": "Output is the opaque output of all health checks performed on this Stage.",
                    "x-kubernetes-preserve-unknown-fields": true
                  },
                  "status": {
                    "description": "Status describes the health of the Stage.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "lastHandledRefresh": {
                "description": "LastHandledRefresh holds the value of the most recent AnnotationKeyRefresh\nannotation that was handled by the controller. This field can be used to\ndetermine whether the request to refresh the resource has been handled.",
                "type": "string"
              },
              "lastPromotion": {
                "description": "LastPromotion is a reference to the last completed promotion.",
                "properties": {
                  "finishedAt": {
                    "description": "FinishedAt is the time at which the Promotion was completed.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "freight": {
                    "description": "Freight is the freight being promoted.",
                    "properties": {
                      "charts": {
                        "description": "Charts describes specific versions of specific Helm charts.",
                        "items": {
                          "description": "Chart describes a specific version of a Helm chart.",
                          "properties": {
                            "name": {
                              "description": "Name specifies the name of the chart.",
                              "type": "string"
                            },
                            "repoURL": {
                              "description": "RepoURL specifies the URL of a Helm chart repository. Classic chart\nrepositories (using HTTP/S) can contain differently named charts. When this\nfield points to such a repository, the Name field will specify the name of\nthe chart within the repository. In the case of a repository within an OCI\nregistry, the URL implicitly points to a specific chart and the Name field\nwill be empty.",
                              "type": "string"
                            },
                            "version": {
                              "description": "Version specifies a particular version of the chart.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "commits": {
                        "description": "Commits describes specific Git repository commits.",
                        "items": {
                          "description": "GitCommit describes a specific commit from a specific Git repository.",
                          "properties": {
                            "author": {
                              "description": "Author is the author of the commit.",
                              "type": "string"
                            },
                            "branch": {
                              "description": "Branch denotes the branch of the repository where this commit was found.",
                              "type": "string"
                            },
                            "committer": {
                              "description": "Committer is the person who committed the commit.",
                              "type": "string"
                            },
                            "id": {
                              "description": "ID is the ID of a specific commit in the Git repository specified by\nRepoURL.",
                              "type": "string"
                            },
                            "message": {
                              "description": "Message is the message associated with the commit. At present, this only\ncontains the first line (subject) of the commit message.",
                              "type": "string"
                            },
                            "repoURL": {
                              "description": "RepoURL is the URL of a Git repository.",
                              "type": "string"
                            },
                            "tag": {
                              "description": "Tag denotes a tag in the repository that matched selection criteria and\nresolved to this commit.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "images": {
                        "description": "Images describes specific versions of specific container images.",
                        "items": {
                          "description": "Image describes a specific version of a container image.",
                          "properties": {
                            "annotations": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "description": "Annotations is a map of arbitrary metadata for the image.",
                              "type": "object"
                            },
                            "digest": {
                              "description": "Digest identifies a specific version of the image in the repository\nspecified by RepoURL. This is a more precise identifier than Tag.",
                              "type": "string"
                            },
                            "gitRepoURL": {
                              "description": "GitRepoURL specifies the URL of a Git repository that contains the source\ncode for the image repository referenced by the RepoURL field if Kargo was\nable to infer it.",
                              "type": "string"
                            },
                            "repoURL": {
                              "description": "RepoURL describes the repository in which the image can be found.",
                              "type": "string"
                            },
                            "tag": {
                              "description": "Tag identifies a specific version of the image in the repository specified\nby RepoURL.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "name": {
                        "description": "Name is system-assigned identifier that is derived deterministically from\nthe contents of the Freight. i.e. Two pieces of Freight can be compared for\nequality by comparing their Names.",
                        "type": "string"
                      },
                      "origin": {
                        "description": "Origin describes a kind of Freight in terms of its origin.",
                        "properties": {
                          "kind": {
                            "description": "Kind is the kind of resource from which Freight may have originated. At\npresent, this can only be \"Warehouse\".",
                            "enum": [
                              "Warehouse"
                            ],
                            "type": "string"
                          },
                          "name": {
                            "description": "Name is the name of the resource of the kind indicated by the Kind field\nfrom which Freight may originate.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "kind",
                          "name"
                        ],
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "name": {
                    "description": "Name is the name of the Promotion.",
                    "type": "string"
                  },
                  "status": {
                    "description": "Status is the (optional) status of the Promotion.",
                    "properties": {
                      "currentStep": {
                        "description": "CurrentStep is the index of the current promotion step being executed. This\npermits steps that have already run successfully to be skipped on\nsubsequent reconciliations attempts.",
                        "format": "int64",
                        "maximum": 9223372036854776000,
                        "minimum": -9223372036854776000,
                        "type": "integer"
                      },
                      "finishedAt": {
                        "description": "FinishedAt is the time when the promotion was completed.",
                        "format": "date-time",
                        "type": "string"
                      },
                      "freight": {
                        "description": "Freight is the detail of the piece of freight that was referenced by this promotion.",
                        "properties": {
                          "charts": {
                            "description": "Charts describes specific versions of specific Helm charts.",
                            "items": {
                              "description": "Chart describes a specific version of a Helm chart.",
                              "properties": {
                                "name": {
                                  "description": "Name specifies the name of the chart.",
                                  "type": "string"
                                },
                                "repoURL": {
                                  "description": "RepoURL specifies the URL of a Helm chart repository. Classic chart\nrepositories (using HTTP/S) can contain differently named charts. When this\nfield points to such a repository, the Name field will specify the name of\nthe chart within the repository. In the case of a repository within an OCI\nregistry, the URL implicitly points to a specific chart and the Name field\nwill be empty.",
                                  "type": "string"
                                },
                                "version": {
                                  "description": "Version specifies a particular version of the chart.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "commits": {
                            "description": "Commits describes specific Git repository commits.",
                            "items": {
                              "description": "GitCommit describes a specific commit from a specific Git repository.",
                              "properties": {
                                "author": {
                                  "description": "Author is the author of the commit.",
                                  "type": "string"
                                },
                                "branch": {
                                  "description": "Branch denotes the branch of the repository where this commit was found.",
                                  "type": "string"
                                },
                                "committer": {
                                  "description": "Committer is the person who committed the commit.",
                                  "type": "string"
                                },
                                "id": {
                                  "description": "ID is the ID of a specific commit in the Git repository specified by\nRepoURL.",
                                  "type": "string"
                                },
                                "message": {
                                  "description": "Message is the message associated with the commit. At present, this only\ncontains the first line (subject) of the commit message.",
                                  "type": "string"
                                },
                                "repoURL": {
                                  "description": "RepoURL is the URL of a Git repository.",
                                  "type": "string"
                                },
                                "tag": {
                                  "description": "Tag denotes a tag in the repository that matched selection criteria and\nresolved to this commit.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "images": {
                            "description": "Images describes specific versions of specific container images.",
                            "items": {
                              "description": "Image describes a specific version of a container image.",
                              "properties": {
                                "annotations": {
                                  "additionalProperties": {
                                    "type": "string"
                                  },
                                  "description": "Annotations is a map of arbitrary metadata for the image.",
                                  "type": "object"
                                },
                                "digest": {
                                  "description": "Digest identifies a specific version of the image in the repository\nspecified by RepoURL. This is a more precise identifier than Tag.",
                                  "type": "string"
                                },
                                "gitRepoURL": {
                                  "description": "GitRepoURL specifies the URL of a Git repository that contains the source\ncode for the image repository referenced by the RepoURL field if Kargo was\nable to infer it.",
                                  "type": "string"
                                },
                                "repoURL": {
                                  "description": "RepoURL describes the repository in which the image can be found.",
                                  "type": "string"
                                },
                                "tag": {
                                  "description": "Tag identifies a specific version of the image in the repository specified\nby RepoURL.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "name": {
                            "description": "Name is system-assigned identifier that is derived deterministically from\nthe contents of the Freight. i.e. Two pieces of Freight can be compared for\nequality by comparing their Names.",
                            "type": "string"
                          },
                          "origin": {
                            "description": "Origin describes a kind of Freight in terms of its origin.",
                            "properties": {
                              "kind": {
                                "description": "Kind is the kind of resource from which Freight may have originated. At\npresent, this can only be \"Warehouse\".",
                                "enum": [
                                  "Warehouse"
                                ],
                                "type": "string"
                              },
                              "name": {
                                "description": "Name is the name of the resource of the kind indicated by the Kind field\nfrom which Freight may originate.",
                                "type": "string"
                              }
                            },
                            "required": [
                              "kind",
                              "name"
                            ],
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "freightCollection": {
                        "description": "FreightCollection contains the details of the piece of Freight referenced\nby this Promotion as well as any additional Freight that is carried over\nfrom the target Stage's current state.",
                        "properties": {
                          "id": {
                            "description": "ID is a unique and deterministically calculated identifier for the\nFreightCollection. It is updated on each use of the UpdateOrPush method.",
                            "type": "string"
                          },
                          "items": {
                            "additionalProperties": {
                              "description": "FreightReference is a simplified representation of a piece of Freight -- not\na root resource type.",
                              "properties": {
                                "charts": {
                                  "description": "Charts describes specific versions of specific Helm charts.",
                                  "items": {
                                    "description": "Chart describes a specific version of a Helm chart.",
                                    "properties": {
                                      "name": {
                                        "description": "Name specifies the name of the chart.",
                                        "type": "string"
                                      },
                                      "repoURL": {
                                        "description": "RepoURL specifies the URL of a Helm chart repository. Classic chart\nrepositories (using HTTP/S) can contain differently named charts. When this\nfield points to such a repository, the Name field will specify the name of\nthe chart within the repository. In the case of a repository within an OCI\nregistry, the URL implicitly points to a specific chart and the Name field\nwill be empty.",
                                        "type": "string"
                                      },
                                      "version": {
                                        "description": "Version specifies a particular version of the chart.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "commits": {
                                  "description": "Commits describes specific Git repository commits.",
                                  "items": {
                                    "description": "GitCommit describes a specific commit from a specific Git repository.",
                                    "properties": {
                                      "author": {
                                        "description": "Author is the author of the commit.",
                                        "type": "string"
                                      },
                                      "branch": {
                                        "description": "Branch denotes the branch of the repository where this commit was found.",
                                        "type": "string"
                                      },
                                      "committer": {
                                        "description": "Committer is the person who committed the commit.",
                                        "type": "string"
                                      },
                                      "id": {
                                        "description": "ID is the ID of a specific commit in the Git repository specified by\nRepoURL.",
                                        "type": "string"
                                      },
                                      "message": {
                                        "description": "Message is the message associated with the commit. At present, this only\ncontains the first line (subject) of the commit message.",
                                        "type": "string"
                                      },
                                      "repoURL": {
                                        "description": "RepoURL is the URL of a Git repository.",
                                        "type": "string"
                                      },
                                      "tag": {
                                        "description": "Tag denotes a tag in the repository that matched selection criteria and\nresolved to this commit.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "images": {
                                  "description": "Images describes specific versions of specific container images.",
                                  "items": {
                                    "description": "Image describes a specific version of a container image.",
                                    "properties": {
                                      "annotations": {
                                        "additionalProperties": {
                                          "type": "string"
                                        },
                                        "description": "Annotations is a map of arbitrary metadata for the image.",
                                        "type": "object"
                                      },
                                      "digest": {
                                        "description": "Digest identifies a specific version of the image in the repository\nspecified by RepoURL. This is a more precise identifier than Tag.",
                                        "type": "string"
                                      },
                                      "gitRepoURL": {
                                        "description": "GitRepoURL specifies the URL of a Git repository that contains the source\ncode for the image repository referenced by the RepoURL field if Kargo was\nable to infer it.",
                                        "type": "string"
                                      },
                                      "repoURL": {
                                        "description": "RepoURL describes the repository in which the image can be found.",
                                        "type": "string"
                                      },
                                      "tag": {
                                        "description": "Tag identifies a specific version of the image in the repository specified\nby RepoURL.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "name": {
                                  "description": "Name is system-assigned identifier that is derived deterministically from\nthe contents of the Freight. i.e. Two pieces of Freight can be compared for\nequality by comparing their Names.",
                                  "type": "string"
                                },
                                "origin": {
                                  "description": "Origin describes a kind of Freight in terms of its origin.",
                                  "properties": {
                                    "kind": {
                                      "description": "Kind is the kind of resource from which Freight may have originated. At\npresent, this can only be \"Warehouse\".",
                                      "enum": [
                                        "Warehouse"
                                      ],
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "Name is the name of the resource of the kind indicated by the Kind field\nfrom which Freight may originate.",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "kind",
                                    "name"
                                  ],
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "description": "Freight is a map of FreightReference objects, indexed by their Warehouse\norigin.",
                            "type": "object"
                          },
                          "verificationHistory": {
                            "description": "VerificationHistory is a stack of recent VerificationInfo. By default,\nthe last ten VerificationInfo are stored.",
                            "items": {
                              "description": "VerificationInfo contains the details of an instance of a Verification\nprocess.",
                              "properties": {
                                "actor": {
                                  "description": "Actor is the name of the entity that initiated or aborted the\nVerification process.",
                                  "type": "string"
                                },
                                "analysisRun": {
                                  "description": "AnalysisRun is a reference to the Argo Rollouts AnalysisRun that implements\nthe Verification process.",
                                  "properties": {
                                    "name": {
                                      "description": "Name is the name of the AnalysisRun.",
                                      "type": "string"
                                    },
                                    "namespace": {
                                      "description": "Namespace is the namespace of the AnalysisRun.",
                                      "type": "string"
                                    },
                                    "phase": {
                                      "description": "Phase is the last observed phase of the AnalysisRun referenced by Name.",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "name",
                                    "namespace",
                                    "phase"
                                  ],
                                  "type": "object"
                                },
                                "finishTime": {
                                  "description": "FinishTime is the time at which the Verification process finished.",
                                  "format": "date-time",
                                  "type": "string"
                                },
                                "id": {
                                  "description": "ID is the identifier of the Verification process.",
                                  "type": "string"
                                },
                                "message": {
                                  "description": "Message may contain additional information about why the verification\nprocess is in its current phase.",
                                  "type": "string"
                                },
                                "phase": {
                                  "description": "Phase describes the current phase of the Verification process. Generally,\nthis will be a reflection of the underlying AnalysisRun's phase, however,\nthere are exceptions to this, such as in the case where an AnalysisRun\ncannot be launched successfully.",
                                  "type": "string"
                                },
                                "startTime": {
                                  "description": "StartTime is the time at which the Verification process was started.",
                                  "format": "date-time",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "type": "object"
                      },
                      "healthChecks": {
                        "description": "HealthChecks contains the health check directives to be executed after\nthe Promotion has completed.",
                        "items": {
                          "description": "HealthCheckStep describes a health check directive which can be executed by\na Stage to verify the health of a Promotion result.",
                          "properties": {
                            "config": {
                              "description": "Config is the configuration for the directive.",
                              "x-kubernetes-preserve-unknown-fields": true
                            },
                            "uses": {
                              "description": "Uses identifies a runner that can execute this step.",
                              "minLength": 1,
                              "type": "string"
                            }
                          },
                          "required": [
                            "uses"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "lastHandledRefresh": {
                        "description": "LastHandledRefresh holds the value of the most recent AnnotationKeyRefresh\nannotation that was handled by the controller. This field can be used to\ndetermine whether the request to refresh the resource has been handled.",
                        "type": "string"
                      },
                      "message": {
                        "description": "Message is a display message about the promotion, including any errors\npreventing the Promotion controller from executing this Promotion.\ni.e. If the Phase field has a value of Failed, this field can be expected\nto explain why.",
                        "type": "string"
                      },
                      "phase": {
                        "description": "Phase describes where the Promotion currently is in its lifecycle.",
                        "type": "string"
                      },
                      "state": {
                        "description": "State stores the state of the promotion process between reconciliation\nattempts.",
                        "x-kubernetes-preserve-unknown-fields": true
                      },
                      "stepExecutionMetadata": {
                        "description": "StepExecutionMetadata tracks metadata pertaining to the execution\nof individual promotion steps.",
                        "items": {
                          "description": "StepExecutionMetadata tracks metadata pertaining to the execution of\na promotion step.",
                          "properties": {
                            "alias": {
                              "description": "Alias is the alias of the step.",
                              "type": "string"
                            },
                            "errorCount": {
                              "description": "ErrorCount tracks consecutive failed attempts to execute the step.",
                              "format": "int32",
                              "maximum": 2147483647,
                              "minimum": -2147483648,
                              "type": "integer"
                            },
                            "finishedAt": {
                              "description": "FinishedAt is the time at which the final attempt to execute the step\ncompleted.",
                              "format": "date-time",
                              "type": "string"
                            },
                            "message": {
                              "description": "Message is a display message about the step, including any errors.",
                              "type": "string"
                            },
                            "startedAt": {
                              "description": "StartedAt is the time at which the first attempt to execute the step\nbegan.",
                              "format": "date-time",
                              "type": "string"
                            },
                            "status": {
                              "description": "Status is the high-level outcome of the step.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              },
              "message": {
                "description": "Message describes any errors that are preventing the Stage controller\nfrom assessing Stage health or from finding new Freight.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that this Stage\nstatus was reconciled against.",
                "format": "int64",
                "maximum": 9223372036854776000,
                "minimum": -9223372036854776000,
                "type": "integer"
              },
              "phase": {
                "description": "Phase describes where the Stage currently is in its lifecycle.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "spec"
        ],
        "type": "object"
      },
      "else": {
        "not": {}
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": "Warehouse"
          }
        },
        "required": [
          "kind"
        ]
      },
      "then": {
        "description": "Warehouse is a source of Freight.",
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "spec": {
            "description": "Spec describes sources of artifacts.",
            "properties": {
              "freightCreationPolicy": {
                "default": "Automatic",
                "description": "FreightCreationPolicy describes how Freight is created by this Warehouse.\nThis field is optional. When left unspecified, the field is implicitly\ntreated as if its value were \"Automatic\".\nAccepted values: Automatic, Manual",
                "enum": [
                  "Automatic",
                  "Manual"
                ],
                "type": "string"
              },
              "interval": {
                "default": "5m0s",
                "description": "Interval is the reconciliation interval for this Warehouse. On each\nreconciliation, the Warehouse will discover new artifacts and optionally\nproduce new Freight. This field is optional. When left unspecified, the\nfield is implicitly treated as if its value were \"5m0s\".",
                "pattern": "^([0-9]+(\\.[0-9]+)?(s|m|h))+$",
                "type": "string"
              },
              "shard": {
                "description": "Shard is the name of the shard that this Warehouse belongs to. This is an\noptional field. If not specified, the Warehouse will belong to the default\nshard. A defaulting webhook will sync this field with the value of the\nkargo.akuity.io/shard label. When the shard label is not present or differs\nfrom the value of this field, the defaulting webhook will set the label to\nthe value of this field. If the shard label is present and this field is\nempty, the defaulting webhook will set the value of this field to the value\nof the shard label.",
                "type": "string"
              },
              "subscriptions": {
                "description": "Subscriptions describes sources of artifacts to be included in Freight\nproduced by this Warehouse.",
                "items": {
                  "description": "RepoSubscription describes a subscription to ONE OF a Git repository, a\ncontainer image repository, or a Helm chart repository.",
                  "properties": {
                    "chart": {
                      "description": "Chart describes a subscription to a Helm chart repository.",
                      "properties": {
                        "discoveryLimit": {
                          "default": 20,
                          "description": "DiscoveryLimit is an optional limit on the number of chart versions that\ncan be discovered for this subscription. The limit is applied after\nfiltering charts based on the SemverConstraint field.\nWhen left unspecified, the field is implicitly treated as if its value\nwere \"20\". The upper limit for this field is 100.",
                          "format": "int32",
                          "maximum": 100,
                          "minimum": 1,
                          "type": "integer"
                        },
                        "name": {
                          "description": "Name specifies the name of a Helm chart to subscribe to within a classic\nchart repository specified by the RepoURL field. This field is required\nwhen the RepoURL field points to a classic chart repository and MUST\notherwise be empty.",
                          "type": "string"
                        },
                        "repoURL": {
                          "description": "RepoURL specifies the URL of a Helm chart repository. It may be a classic\nchart repository (using HTTP/S) OR a repository within an OCI registry.\nClassic chart repositories can contain differently named charts. When this\nfield points to such a repository, the Name field MUST also be used\nto specify the name of the desired chart within that repository. In the\ncase of a repository within an OCI registry, the URL implicitly points to\na specific chart and the Name field MUST NOT be used. The RepoURL field is\nrequired.",
                          "minLength": 1,
                          "pattern": "^(((https?)|(oci))://)([\\w\\d\\.\\-]+)(:[\\d]+)?(/.*)*$",
                          "type": "string"
                        },
                        "semverConstraint": {
                          "description": "SemverConstraint specifies constraints on what new chart versions are\npermissible. This field is optional. When left unspecified, there will be\nno constraints, which means the latest version of the chart will always be\nused. Care should be taken with leaving this field unspecified, as it can\nlead to the unanticipated rollout of breaking changes.\nMore info: https://github.com/masterminds/semver#checking-version-constraints",
                          "type": "string"
                        }
                      },
                      "required": [
                        "repoURL"
                      ],
                      "type": "object"
                    },
                    "git": {
                      "description": "Git describes a subscriptions to a Git repository.",
                      "properties": {
                        "allowTags": {
                          "description": "AllowTags is a regular expression that can optionally be used to limit the\ntags that are considered in determining the newest commit of interest. The\nvalue in this field only has any effect when the CommitSelectionStrategy is\nLexical, NewestTag, or SemVer. This field is optional.",
                          "type": "string"
                        },
                        "branch": {
                          "description": "Branch references a particular branch of the repository. The value in this\nfield only has any effect when the CommitSelectionStrategy is\nNewestFromBranch or left unspecified (which is implicitly the same as\nNewestFromBranch). This field is optional. When left unspecified, (and the\nCommitSelectionStrategy is NewestFromBranch or unspecified), the\nsubscription is implicitly to the repository's default branch.",
                          "maxLength": 255,
                          "minLength": 1,
                          "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9._\\/-]*[a-zA-Z0-9_-])?$",
                          "type": "string"
                        },
                        "commitSelectionStrategy": {
                          "default": "NewestFromBranch",
                          "description": "CommitSelectionStrategy specifies the rules for how to identify the newest\ncommit of interest in the repository specified by the RepoURL field. This\nfield is optional. When left unspecified, the field is implicitly treated\nas if its value were \"NewestFromBranch\".\nAccepted values: Lexical, NewestFromBranch, NewestTag, SemVer",
                          "enum": [
                            "Lexical",
                            "NewestFromBranch",
                            "NewestTag",
                            "SemVer"
                          ],
                          "type": "string"
                        },
                        "discoveryLimit": {
                          "default": 20,
                          "description": "DiscoveryLimit is an optional limit on the number of commits that can be\ndiscovered for this subscription. The limit is applied after filtering\ncommits based on the AllowTags and IgnoreTags fields.\nWhen left unspecified, the field is implicitly treated as if its value\nwere \"20\". The upper limit for this field is 100.",
                          "format": "int32",
                          "maximum": 100,
                          "minimum": 1,
                          "type": "integer"
                        },
                        "excludePaths": {
                          "description": "ExcludePaths is a list of selectors that designate paths in the repository\nthat should NOT trigger the production of new Freight when changes are\ndetected therein. When specified, changes in the identified paths will not\ntrigger Freight production. When not specified, paths that should trigger\nFreight production will be defined solely by IncludePaths. Selectors may be\ndefined using:\n  1. Exact paths to files or directories (ex. \"charts/foo\")\n  2. Glob patterns (prefix the pattern with \"glob:\"; ex. \"glob:*.yaml\")\n  3. Regular expressions (prefix the pattern with \"regex:\" or \"regexp:\";\n     ex. \"regexp:^.*\\.yaml$\")\nPaths selected by IncludePaths may be unselected by ExcludePaths. This\nis a useful method for including a broad set of paths and then excluding a\nsubset of them.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "ignoreTags": {
                          "description": "IgnoreTags is a list of tags that must be ignored when determining the\nnewest commit of interest. No regular expressions or glob patterns are\nsupported yet. The value in this field only has any effect when the\nCommitSelectionStrategy is Lexical, NewestTag, or SemVer. This field is\noptional.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "includePaths": {
                          "description": "IncludePaths is a list of selectors that designate paths in the repository\nthat should trigger the production of new Freight when changes are detected\ntherein. When specified, only changes in the identified paths will trigger\nFreight production. When not specified, changes in any path will trigger\nFreight production. Selectors may be defined using:\n  1. Exact paths to files or directories (ex. \"charts/foo\")\n  2. Glob patterns (prefix the pattern with \"glob:\"; ex. \"glob:*.yaml\")\n  3. Regular expressions (prefix the pattern with \"regex:\" or \"regexp:\";\n     ex. \"regexp:^.*\\.yaml$\")\nPaths selected by IncludePaths may be unselected by ExcludePaths. This\nis a useful method for including a broad set of paths and then excluding a\nsubset of them.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "insecureSkipTLSVerify": {
                          "description": "InsecureSkipTLSVerify specifies whether certificate verification errors\nshould be ignored when connecting to the repository. This should be enabled\nonly with great caution.",
                          "type": "boolean"
                        },
                        "repoURL": {
                          "description": "URL is the repository's URL. This is a required field.",
                          "minLength": 1,
                          "pattern": "(?:^(https?)://(?:([\\w-]+):(.+)@)?([\\w-]+(?:\\.[\\w-]+)*)(?::(\\d{1,5}))?(/.*)$)|(?:^([\\w-]+)@([\\w+]+(?:\\.[\\w-]+)*):(/?.*))",
                          "type": "string"
                        },
                        "semverConstraint": {
                          "description": "SemverConstraint specifies constraints on what new tagged commits are\nconsidered in determining the newest commit of interest. The value in this\nfield only has any effect when the CommitSelectionStrategy is SemVer. This\nfield is optional. When left unspecified, there will be no constraints,\nwhich means the latest semantically tagged commit will always be used. Care\nshould be taken with leaving this field unspecified, as it can lead to the\nunanticipated rollout of breaking changes.",
                          "type": "string"
                        },
                        "strictSemvers": {
                          "default": true,
                          "description": "StrictSemvers specifies whether only \"strict\" semver tags should be\nconsidered. A \"strict\" semver tag is one containing ALL of major, minor,\nand patch version components. This is enabled by default, but only has any\neffect when the CommitSelectionStrategy is SemVer. This should be disabled\ncautiously, as it creates the potential for any tag containing numeric\ncharacters only to be mistaken for a semver string containing the major\nversion number only.",
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "repoURL",
                        "strictSemvers"
                      ],
                      "type": "object"
                    },
                    "image": {
                      "description": "Image describes a subscription to container image repository.",
                      "properties": {
                        "allowTags": {
                          "description": "AllowTags is a regular expression that can optionally be used to limit the\nimage tags that are considered in determining the newest version of an\nimage. This field is optional.",
                          "type": "string"
                        },
                        "discoveryLimit": {
                          "default": 20,
                          "description": "DiscoveryLimit is an optional limit on the number of image references\nthat can be discovered for this subscription. The limit is applied after\nfiltering images based on the AllowTags and IgnoreTags fields.\nWhen left unspecified, the field is implicitly treated as if its value\nwere \"20\". The upper limit for this field is 100.",
                          "format": "int32",
                          "maximum": 100,
                          "minimum": 1,
                          "type": "integer"
                        },
                        "gitRepoURL": {
                          "description": "GitRepoURL optionally specifies the URL of a Git repository that contains\nthe source code for the image repository referenced by the RepoURL field.\nWhen this is specified, Kargo MAY be able to infer and link to the exact\nrevision of that source code that was used to build the image.",
                          "pattern": "^https?://(\\w+([\\.-]\\w+)*@)?\\w+([\\.-]\\w+)*(:[\\d]+)?(/.*)?$",
                          "type": "string"
                        },
                        "ignoreTags": {
                          "description": "IgnoreTags is a list of tags that must be ignored when determining the\nnewest version of an image. No regular expressions or glob patterns are\nsupported yet. This field is optional.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "imageSelectionStrategy": {
                          "default": "SemVer",
                          "description": "ImageSelectionStrategy specifies the rules for how to identify the newest version\nof the image specified by the RepoURL field. This field is optional. When\nleft unspecified, the field is implicitly treated as if its value were\n\"SemVer\".\nAccepted values: Digest, Lexical, NewestBuild, SemVer",
                          "enum": [
                            "Digest",
                            "Lexical",
                            "NewestBuild",
                            "SemVer"
                          ],
                          "type": "string"
                        },
                        "insecureSkipTLSVerify": {
                          "description": "InsecureSkipTLSVerify specifies whether certificate verification errors\nshould be ignored when connecting to the repository. This should be enabled\nonly with great caution.",
                          "type": "boolean"
                        },
                        "platform": {
                          "description": "Platform is a string of the form <os>/<arch> that limits the tags that can\nbe considered when searching for new versions of an image. This field is\noptional. When left unspecified, it is implicitly equivalent to the\nOS/architecture of the Kargo controller. Care should be taken to set this\nvalue correctly in cases where the image referenced by this\nImageRepositorySubscription will run on a Kubernetes node with a different\nOS/architecture than the Kargo controller. At present this is uncommon, but\nnot unheard of.",
                          "type": "string"
                        },
                        "repoURL": {
                          "description": "RepoURL specifies the URL of the image repository to subscribe to. The\nvalue in this field MUST NOT include an image tag. This field is required.",
                          "minLength": 1,
                          "pattern": "^(\\w+([\\.-]\\w+)*(:[\\d]+)?/)?(\\w+([\\.-]\\w+)*)(/\\w+([\\.-]\\w+)*)*$",
                          "type": "string"
                        },
                        "semverConstraint": {
                          "description": "SemverConstraint specifies constraints on what new image versions are\npermissible. The value in this field only has any effect when the\nImageSelectionStrategy is SemVer or left unspecified (which is implicitly\nthe same as SemVer). This field is also optional. When left unspecified,\n(and the ImageSelectionStrategy is SemVer or unspecified), there will be no\nconstraints, which means the latest semantically tagged version of an image\nwill always be used. Care should be taken with leaving this field\nunspecified, as it can lead to the unanticipated rollout of breaking\nchanges.\nMore info: https://github.com/masterminds/semver#checking-version-constraints",
                          "type": "string"
                        },
                        "strictSemvers": {
                          "default": true,
                          "description": "StrictSemvers specifies whether only \"strict\" semver tags should be\nconsidered. A \"strict\" semver tag is one containing ALL of major, minor,\nand patch version components. This is enabled by default, but only has any\neffect when the ImageSelectionStrategy is SemVer. This should be disabled\ncautiously, as it is not uncommon to tag container images with short Git\ncommit hashes, which have the potential to contain numeric characters only\nand could be mistaken for a semver string containing the major version\nnumber only.",
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "repoURL",
                        "strictSemvers"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "minItems": 1,
                "type": "array"
              }
            },
            "required": [
              "interval",
              "subscriptions"
            ],
            "type": "object"
          },
          "status": {
            "description": "Status describes the Warehouse's most recently observed state.",
            "properties": {
              "conditions": {
                "description": "Conditions contains the last observations of the Warehouse's current\nstate.",
                "items": {
                  "description": "Condition contains details for one aspect of the current state of this API Resource.",
                  "properties": {
                    "lastTransitionTime": {
                      "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "message": {
                      "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                      "maxLength": 32768,
                      "type": "string"
                    },
                    "observedGeneration": {
                      "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                      "format": "int64",
                      "maximum": 9223372036854776000,
                      "minimum": 0,
                      "type": "integer"
                    },
                    "reason": {
                      "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                      "maxLength": 1024,
                      "minLength": 1,
                      "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                      "type": "string"
                    },
                    "status": {
                      "description": "status of the condition, one of True, False, Unknown.",
                      "enum": [
                        "True",
                        "False",
                        "Unknown"
                      ],
                      "type": "string"
                    },
                    "type": {
                      "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                      "maxLength": 316,
                      "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                      "type": "string"
                    }
                  },
                  "required": [
                    "lastTransitionTime",
                    "message",
                    "reason",
                    "status",
                    "type"
                  ],
                  "type": "object"
                },
                "type": "array",
                "x-kubernetes-list-map-keys": [
                  "type"
                ],
                "x-kubernetes-list-type": "map"
              },
              "discoveredArtifacts": {
                "description": "DiscoveredArtifacts holds the artifacts discovered by the Warehouse.",
                "properties": {
                  "charts": {
                    "description": "Charts holds the charts discovered by the Warehouse for the chart\nsubscriptions.",
                    "items": {
                      "description": "ChartDiscoveryResult represents the result of a chart discovery operation for\na ChartSubscription.",
                      "properties": {
                        "name": {
                          "description": "Name is the name of the Helm chart, as specified in the ChartSubscription.",
                          "type": "string"
                        },
                        "repoURL": {
                          "description": "RepoURL is the repository URL of the Helm chart, as specified in the\nChartSubscription.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "semverConstraint": {
                          "description": "SemverConstraint is the constraint for which versions were discovered.\nThis field is optional, and only populated if the ChartSubscription\nspecifies a SemverConstraint.",
                          "type": "string"
                        },
                        "versions": {
                          "description": "Versions is a list of versions discovered by the Warehouse for the\nChartSubscription. An empty list indicates that the discovery operation was\nsuccessful, but no versions matching the ChartSubscription criteria were\nfound.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "repoURL"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "discoveredAt": {
                    "description": "DiscoveredAt is the time at which the Warehouse discovered the artifacts.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "git": {
                    "description": "Git holds the commits discovered by the Warehouse for the Git\nsubscriptions.",
                    "items": {
                      "description": "GitDiscoveryResult represents the result of a Git discovery operation for a\nGitSubscription.",
                      "properties": {
                        "commits": {
                          "description": "Commits is a list of commits discovered by the Warehouse for the\nGitSubscription. An empty list indicates that the discovery operation was\nsuccessful, but no commits matching the GitSubscription criteria were found.",
                          "items": {
                            "description": "DiscoveredCommit represents a commit discovered by a Warehouse for a\nGitSubscription.",
                            "properties": {
                              "author": {
                                "description": "Author is the author of the commit.",
                                "type": "string"
                              },
                              "branch": {
                                "description": "Branch is the branch in which the commit was found. This field is\noptional, and populated based on the CommitSelectionStrategy of the\nGitSubscription.",
                                "type": "string"
                              },
                              "committer": {
                                "description": "Committer is the person who committed the commit.",
                                "type": "string"
                              },
                              "creatorDate": {
                                "description": "CreatorDate is the commit creation date as specified by the commit, or\nthe tagger date if the commit belongs to an annotated tag.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "id": {
                                "description": "ID is the identifier of the commit. This typically is a SHA-1 hash.",
                                "minLength": 1,
                                "type": "string"
                              },
                              "subject": {
                                "description": "Subject is the subject of the commit (i.e. the first line of the commit\nmessage).",
                                "type": "string"
                              },
                              "tag": {
                                "description": "Tag is the tag that resolved to this commit. This field is optional, and\npopulated based on the CommitSelectionStrategy of the GitSubscription.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "repoURL": {
                          "description": "RepoURL is the repository URL of the GitSubscription.",
                          "minLength": 1,
                          "pattern": "(?:^(https?)://(?:([\\w-]+):(.+)@)?([\\w-]+(?:\\.[\\w-]+)*)(?::(\\d{1,5}))?(/.*)$)|(?:^([\\w-]+)@([\\w+]+(?:\\.[\\w-]+)*):(/?.*))",
                          "type": "string"
                        }
                      },
                      "required": [
                        "repoURL"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "images": {
                    "description": "Images holds the image references discovered by the Warehouse for the\nimage subscriptions.",
                    "items": {
                      "description": "ImageDiscoveryResult represents the result of an image discovery operation\nfor an ImageSubscription.",
                      "properties": {
                        "platform": {
                          "description": "Platform is the target platform constraint of the ImageSubscription\nfor which references were discovered. This field is optional, and\nonly populated if the ImageSubscription specifies a Platform.",
                          "type": "string"
                        },
                        "references": {
                          "description": "References is a list of image references discovered by the Warehouse for\nthe ImageSubscription. An empty list indicates that the discovery\noperation was successful, but no images matching the ImageSubscription\ncriteria were found.",
                          "items": {
                            "description": "DiscoveredImageReference represents an image reference discovered by a\nWarehouse for an ImageSubscription.",
                            "properties": {
                              "annotations": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Annotations is a map of key-value pairs that provide additional\ninformation about the image.",
                                "type": "object"
                              },
                              "createdAt": {
                                "description": "CreatedAt is the time the image was created. This field is optional, and\nnot populated for every ImageSelectionStrategy.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "digest": {
                                "description": "Digest is the digest of the image.",
                                "minLength": 1,
                                "pattern": "^[a-z0-9]+:[a-f0-9]+$",
                                "type": "string"
                              },
                              "gitRepoURL": {
                                "description": "GitRepoURL is the URL of the Git repository that contains the source\ncode for this image. This field is optional, and only populated if the\nImageSubscription specifies a GitRepoURL.",
                                "type": "string"
                              },
                              "tag": {
                                "description": "Tag is the tag of the image.",
                                "maxLength": 128,
                                "minLength": 1,
                                "pattern": "^[\\w.\\-\\_]+$",
                                "type": "string"
                              }
                            },
                            "required": [
                              "digest",
                              "tag"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "repoURL": {
                          "description": "RepoURL is the repository URL of the image, as specified in the\nImageSubscription.",
                          "minLength": 1,
                          "type": "string"
                        }
                      },
                      "required": [
                        "repoURL"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "lastFreightID": {
                "description": "LastFreightID is a reference to the system-assigned identifier (name) of\nthe most recent Freight produced by the Warehouse.",
                "type": "string"
              },
              "lastHandledRefresh": {
                "description": "LastHandledRefresh holds the value of the most recent AnnotationKeyRefresh\nannotation that was handled by the controller. This field can be used to\ndetermine whether the request to refresh the resource has been handled.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that this Warehouse\nwas reconciled against.",
                "format": "int64",
                "maximum": 9223372036854776000,
                "minimum": -9223372036854776000,
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "spec"
        ],
        "type": "object"
      },
      "else": {
        "not": {}
      }
    }
  ]
}